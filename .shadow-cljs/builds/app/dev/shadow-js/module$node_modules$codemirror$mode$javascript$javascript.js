["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/codemirror/mode/javascript/javascript.js"],"~:js","shadow$provide.module$node_modules$codemirror$mode$javascript$javascript=function(global,require,module,exports){(function(mod){\"object\"==typeof exports&&\"object\"==typeof module?mod(require(\"module$node_modules$codemirror$lib$codemirror\")):\"function\"==typeof define&&define.amd?define([\"../../lib/codemirror\"],mod):mod(CodeMirror)})(function(CodeMirror){CodeMirror.defineMode(\"javascript\",function(config,parserConfig){function ret(tp,style,cont){type$jscomp$1=tp;content=cont;return style}function tokenBase(stream,\nstate){var ch=stream.next();if('\"'==ch||\"'\"==ch)return state.tokenize=tokenString(ch),state.tokenize(stream,state);if(\".\"==ch&&stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/))return ret(\"number\",\"number\");if(\".\"==ch&&stream.match(\"..\"))return ret(\"spread\",\"meta\");if(/[\\[\\]{}\\(\\),;:\\.]/.test(ch))return ret(ch);if(\"\\x3d\"==ch&&stream.eat(\"\\x3e\"))return ret(\"\\x3d\\x3e\",\"operator\");if(\"0\"==ch&&stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/))return ret(\"number\",\"number\");if(/\\d/.test(ch))return stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/),\nret(\"number\",\"number\");if(\"/\"==ch){if(stream.eat(\"*\"))return state.tokenize=tokenComment,tokenComment(stream,state);if(stream.eat(\"/\"))return stream.skipToEnd(),ret(\"comment\",\"comment\");if(expressionAllowed(stream,state,1)){a:for(var inSet=state=!1;null!=(ch=stream.next());){if(!state){if(\"/\"==ch&&!inSet)break a;\"[\"==ch?inSet=!0:inSet&&\"]\"==ch&&(inSet=!1)}state=!state&&\"\\\\\"==ch}stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);return ret(\"regexp\",\"string-2\")}stream.eat(\"\\x3d\");return ret(\"operator\",\n\"operator\",stream.current())}if(\"`\"==ch)return state.tokenize=tokenQuasi,tokenQuasi(stream,state);if(\"#\"==ch&&\"!\"==stream.peek())return stream.skipToEnd(),ret(\"meta\",\"meta\");if(\"#\"==ch&&stream.eatWhile(wordRE))return ret(\"variable\",\"property\");if(\"\\x3c\"==ch&&stream.match(\"!--\")||\"-\"==ch&&stream.match(\"-\\x3e\")&&!/\\S/.test(stream.string.slice(0,stream.start)))return stream.skipToEnd(),ret(\"comment\",\"comment\");if(isOperatorChar.test(ch))return\"\\x3e\"==ch&&state.lexical&&\"\\x3e\"==state.lexical.type||(stream.eat(\"\\x3d\")?\n\"!\"!=ch&&\"\\x3d\"!=ch||stream.eat(\"\\x3d\"):/[<>*+\\-|&?]/.test(ch)&&(stream.eat(ch),\"\\x3e\"==ch&&stream.eat(ch))),\"?\"==ch&&stream.eat(\".\")?ret(\".\"):ret(\"operator\",\"operator\",stream.current());if(wordRE.test(ch)){stream.eatWhile(wordRE);ch=stream.current();if(\".\"!=state.lastType){if(keywords.propertyIsEnumerable(ch))return stream=keywords[ch],ret(stream.type,stream.style,ch);if(\"async\"==ch&&stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/,!1))return ret(\"async\",\"keyword\",ch)}return ret(\"variable\",\n\"variable\",ch)}}function tokenString(quote){return function(stream,state){var escaped=!1,next;if(jsonldMode&&\"@\"==stream.peek()&&stream.match(isJsonldKeyword))return state.tokenize=tokenBase,ret(\"jsonld-keyword\",\"meta\");for(;null!=(next=stream.next())&&(next!=quote||escaped);)escaped=!escaped&&\"\\\\\"==next;escaped||(state.tokenize=tokenBase);return ret(\"string\",\"string\")}}function tokenComment(stream,state){for(var maybeEnd=!1,ch;ch=stream.next();){if(\"/\"==ch&&maybeEnd){state.tokenize=tokenBase;break}maybeEnd=\n\"*\"==ch}return ret(\"comment\",\"comment\")}function tokenQuasi(stream,state){for(var escaped=!1,next;null!=(next=stream.next());){if(!escaped&&(\"`\"==next||\"$\"==next&&stream.eat(\"{\"))){state.tokenize=tokenBase;break}escaped=!escaped&&\"\\\\\"==next}return ret(\"quasi\",\"string-2\",stream.current())}function findFatArrow(stream,state){state.fatArrowAt&&(state.fatArrowAt=null);var arrow=stream.string.indexOf(\"\\x3d\\x3e\",stream.start);if(!(0>arrow)){if(isTS){var m=/:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start,\narrow));m&&(arrow=m.index)}m=0;var sawSomething=!1;for(--arrow;0<=arrow;--arrow){var ch=stream.string.charAt(arrow),bracket=\"([{}])\".indexOf(ch);if(0<=bracket&&3>bracket){if(!m){++arrow;break}if(0==--m){\"(\"==ch&&(sawSomething=!0);break}}else if(3<=bracket&&6>bracket)++m;else if(wordRE.test(ch))sawSomething=!0;else if(/[\"'\\/`]/.test(ch))for(;;--arrow){if(0==arrow)return;if(stream.string.charAt(arrow-1)==ch&&\"\\\\\"!=stream.string.charAt(arrow-2)){arrow--;break}}else if(sawSomething&&!m){++arrow;break}}sawSomething&&\n!m&&(state.fatArrowAt=arrow)}}function JSLexical(indented,column,type,align,prev,info){this.indented=indented;this.column=column;this.type=type;this.prev=prev;this.info=info;null!=align&&(this.align=align)}function pass(){for(var i=arguments.length-1;0<=i;i--)cx.cc.push(arguments[i])}function cont(){pass.apply(null,arguments);return!0}function inList(name,list){for(;list;list=list.next)if(list.name==name)return!0;return!1}function register(varname){var state=cx.state;cx.marked=\"def\";if(state.context)if(\"var\"==\nstate.lexical.info&&state.context&&state.context.block){var newContext=registerVarScoped(varname,state.context);if(null!=newContext){state.context=newContext;return}}else if(!inList(varname,state.localVars)){state.localVars=new Var(varname,state.localVars);return}parserConfig.globalVars&&!inList(varname,state.globalVars)&&(state.globalVars=new Var(varname,state.globalVars))}function registerVarScoped(varname,context){return context?context.block?(varname=registerVarScoped(varname,context.prev))?varname==\ncontext.prev?context:new Context(varname,context.vars,!0):null:inList(varname,context.vars)?context:new Context(context.prev,new Var(varname,context.vars),!1):null}function isModifier(name){return\"public\"==name||\"private\"==name||\"protected\"==name||\"abstract\"==name||\"readonly\"==name}function Context(prev,vars,block){this.prev=prev;this.vars=vars;this.block=block}function Var(name,next){this.name=name;this.next=next}function pushcontext(){cx.state.context=new Context(cx.state.context,cx.state.localVars,\n!1);cx.state.localVars=defaultVars}function pushblockcontext(){cx.state.context=new Context(cx.state.context,cx.state.localVars,!0);cx.state.localVars=null}function popcontext(){cx.state.localVars=cx.state.context.vars;cx.state.context=cx.state.context.prev}function pushlex(type,info){var result=function(){var state=cx.state,indent=state.indented;if(\"stat\"==state.lexical.type)indent=state.lexical.indented;else for(var outer=state.lexical;outer&&\")\"==outer.type&&outer.align;outer=outer.prev)indent=\nouter.indented;state.lexical=new JSLexical(indent,cx.stream.column(),type,null,state.lexical,info)};result.lex=!0;return result}function poplex(){var state=cx.state;state.lexical.prev&&(\")\"==state.lexical.type&&(state.indented=state.lexical.indented),state.lexical=state.lexical.prev)}function expect(wanted){function exp(type){return type==wanted?cont():\";\"==wanted||\"}\"==type||\")\"==type||\"]\"==type?pass():cont(exp)}return exp}function statement(type,value){return\"var\"==type?cont(pushlex(\"vardef\",value),\nvardef,expect(\";\"),poplex):\"keyword a\"==type?cont(pushlex(\"form\"),parenExpr,statement,poplex):\"keyword b\"==type?cont(pushlex(\"form\"),statement,poplex):\"keyword d\"==type?cx.stream.match(/^\\s*$/,!1)?cont():cont(pushlex(\"stat\"),maybeexpression,expect(\";\"),poplex):\"debugger\"==type?cont(expect(\";\")):\"{\"==type?cont(pushlex(\"}\"),pushblockcontext,block,poplex,popcontext):\";\"==type?cont():\"if\"==type?(\"else\"==cx.state.lexical.info&&cx.state.cc[cx.state.cc.length-1]==poplex&&cx.state.cc.pop()(),cont(pushlex(\"form\"),\nparenExpr,statement,poplex,maybeelse)):\"function\"==type?cont(functiondef):\"for\"==type?cont(pushlex(\"form\"),forspec,statement,poplex):\"class\"==type||isTS&&\"interface\"==value?(cx.marked=\"keyword\",cont(pushlex(\"form\",\"class\"==type?type:value),className,poplex)):\"variable\"==type?isTS&&\"declare\"==value?(cx.marked=\"keyword\",cont(statement)):isTS&&(\"module\"==value||\"enum\"==value||\"type\"==value)&&cx.stream.match(/^\\s*\\w/,!1)?(cx.marked=\"keyword\",\"enum\"==value?cont(enumdef):\"type\"==value?cont(typename,expect(\"operator\"),\ntypeexpr,expect(\";\")):cont(pushlex(\"form\"),pattern,expect(\"{\"),pushlex(\"}\"),block,poplex,poplex)):isTS&&\"namespace\"==value?(cx.marked=\"keyword\",cont(pushlex(\"form\"),expression,statement,poplex)):isTS&&\"abstract\"==value?(cx.marked=\"keyword\",cont(statement)):cont(pushlex(\"stat\"),maybelabel):\"switch\"==type?cont(pushlex(\"form\"),parenExpr,expect(\"{\"),pushlex(\"}\",\"switch\"),pushblockcontext,block,poplex,poplex,popcontext):\"case\"==type?cont(expression,expect(\":\")):\"default\"==type?cont(expect(\":\")):\"catch\"==\ntype?cont(pushlex(\"form\"),pushcontext,maybeCatchBinding,statement,poplex,popcontext):\"export\"==type?cont(pushlex(\"stat\"),afterExport,poplex):\"import\"==type?cont(pushlex(\"stat\"),afterImport,poplex):\"async\"==type?cont(statement):\"@\"==value?cont(expression,statement):pass(pushlex(\"stat\"),expression,expect(\";\"),poplex)}function maybeCatchBinding(type){if(\"(\"==type)return cont(funarg,expect(\")\"))}function expression(type,value){return expressionInner(type,value,!1)}function expressionNoComma(type,value){return expressionInner(type,\nvalue,!0)}function parenExpr(type){return\"(\"!=type?pass():cont(pushlex(\")\"),maybeexpression,expect(\")\"),poplex)}function expressionInner(type,value,noComma){if(cx.state.fatArrowAt==cx.stream.start){var body=noComma?arrowBodyNoComma:arrowBody;if(\"(\"==type)return cont(pushcontext,pushlex(\")\"),commasep(funarg,\")\"),poplex,expect(\"\\x3d\\x3e\"),body,popcontext);if(\"variable\"==type)return pass(pushcontext,pattern,expect(\"\\x3d\\x3e\"),body,popcontext)}body=noComma?maybeoperatorNoComma:maybeoperatorComma;return atomicTypes.hasOwnProperty(type)?\ncont(body):\"function\"==type?cont(functiondef,body):\"class\"==type||isTS&&\"interface\"==value?(cx.marked=\"keyword\",cont(pushlex(\"form\"),classExpression,poplex)):\"keyword c\"==type||\"async\"==type?cont(noComma?expressionNoComma:expression):\"(\"==type?cont(pushlex(\")\"),maybeexpression,expect(\")\"),poplex,body):\"operator\"==type||\"spread\"==type?cont(noComma?expressionNoComma:expression):\"[\"==type?cont(pushlex(\"]\"),arrayLiteral,poplex,body):\"{\"==type?contCommasep(objprop,\"}\",null,body):\"quasi\"==type?pass(quasi,\nbody):\"new\"==type?cont(maybeTarget(noComma)):\"import\"==type?cont(expression):cont()}function maybeexpression(type){return type.match(/[;\\}\\)\\],]/)?pass():pass(expression)}function maybeoperatorComma(type,value){return\",\"==type?cont(maybeexpression):maybeoperatorNoComma(type,value,!1)}function maybeoperatorNoComma(type,value,noComma){var me=0==noComma?maybeoperatorComma:maybeoperatorNoComma,expr=0==noComma?expression:expressionNoComma;if(\"\\x3d\\x3e\"==type)return cont(pushcontext,noComma?arrowBodyNoComma:\narrowBody,popcontext);if(\"operator\"==type)return/\\+\\+|--/.test(value)||isTS&&\"!\"==value?cont(me):isTS&&\"\\x3c\"==value&&cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/,!1)?cont(pushlex(\"\\x3e\"),commasep(typeexpr,\"\\x3e\"),poplex,me):\"?\"==value?cont(expression,expect(\":\"),expr):cont(expr);if(\"quasi\"==type)return pass(quasi,me);if(\";\"!=type){if(\"(\"==type)return contCommasep(expressionNoComma,\")\",\"call\",me);if(\".\"==type)return cont(property,me);if(\"[\"==type)return cont(pushlex(\"]\"),maybeexpression,expect(\"]\"),\npoplex,me);if(isTS&&\"as\"==value)return cx.marked=\"keyword\",cont(typeexpr,me);if(\"regexp\"==type)return cx.state.lastType=cx.marked=\"operator\",cx.stream.backUp(cx.stream.pos-cx.stream.start-1),cont(expr)}}function quasi(type,value){return\"quasi\"!=type?pass():\"${\"!=value.slice(value.length-2)?cont(quasi):cont(expression,continueQuasi)}function continueQuasi(type){if(\"}\"==type)return cx.marked=\"string-2\",cx.state.tokenize=tokenQuasi,cont(quasi)}function arrowBody(type){findFatArrow(cx.stream,cx.state);\nreturn pass(\"{\"==type?statement:expression)}function arrowBodyNoComma(type){findFatArrow(cx.stream,cx.state);return pass(\"{\"==type?statement:expressionNoComma)}function maybeTarget(noComma){return function(type){return\".\"==type?cont(noComma?targetNoComma:target):\"variable\"==type&&isTS?cont(maybeTypeArgs,noComma?maybeoperatorNoComma:maybeoperatorComma):pass(noComma?expressionNoComma:expression)}}function target(_,value){if(\"target\"==value)return cx.marked=\"keyword\",cont(maybeoperatorComma)}function targetNoComma(_,\nvalue){if(\"target\"==value)return cx.marked=\"keyword\",cont(maybeoperatorNoComma)}function maybelabel(type){return\":\"==type?cont(poplex,statement):pass(maybeoperatorComma,expect(\";\"),poplex)}function property(type){if(\"variable\"==type)return cx.marked=\"property\",cont()}function objprop(type,value){if(\"async\"==type)return cx.marked=\"property\",cont(objprop);if(\"variable\"==type||\"keyword\"==cx.style){cx.marked=\"property\";if(\"get\"==value||\"set\"==value)return cont(getterSetter);var m;isTS&&cx.state.fatArrowAt==\ncx.stream.start&&(m=cx.stream.match(/^\\s*:\\s*/,!1))&&(cx.state.fatArrowAt=cx.stream.pos+m[0].length);return cont(afterprop)}if(\"number\"==type||\"string\"==type)return cx.marked=jsonldMode?\"property\":cx.style+\" property\",cont(afterprop);if(\"jsonld-keyword\"==type)return cont(afterprop);if(isTS&&isModifier(value))return cx.marked=\"keyword\",cont(objprop);if(\"[\"==type)return cont(expression,maybetype,expect(\"]\"),afterprop);if(\"spread\"==type)return cont(expressionNoComma,afterprop);if(\"*\"==value)return cx.marked=\n\"keyword\",cont(objprop);if(\":\"==type)return pass(afterprop)}function getterSetter(type){if(\"variable\"!=type)return pass(afterprop);cx.marked=\"property\";return cont(functiondef)}function afterprop(type){if(\":\"==type)return cont(expressionNoComma);if(\"(\"==type)return pass(functiondef)}function commasep(what,end,sep){function proceed(type$jscomp$0,value$jscomp$0){return(sep?-1<sep.indexOf(type$jscomp$0):\",\"==type$jscomp$0)?(type$jscomp$0=cx.state.lexical,\"call\"==type$jscomp$0.info&&(type$jscomp$0.pos=\n(type$jscomp$0.pos||0)+1),cont(function(type,value){return type==end||value==end?pass():pass(what)},proceed)):type$jscomp$0==end||value$jscomp$0==end?cont():sep&&-1<sep.indexOf(\";\")?pass(what):cont(expect(end))}return function(type,value){return type==end||value==end?cont():pass(what,proceed)}}function contCommasep(what,end,info){for(var i=3;i<arguments.length;i++)cx.cc.push(arguments[i]);return cont(pushlex(end,info),commasep(what,end),poplex)}function block(type){return\"}\"==type?cont():pass(statement,\nblock)}function maybetype(type,value){if(isTS){if(\":\"==type)return cont(typeexpr);if(\"?\"==value)return cont(maybetype)}}function maybetypeOrIn(type,value){if(isTS&&(\":\"==type||\"in\"==value))return cont(typeexpr)}function mayberettype(type){if(isTS&&\":\"==type)return cx.stream.match(/^\\s*\\w+\\s+is\\b/,!1)?cont(expression,isKW,typeexpr):cont(typeexpr)}function isKW(_,value){if(\"is\"==value)return cx.marked=\"keyword\",cont()}function typeexpr(type,value){if(\"keyof\"==value||\"typeof\"==value||\"infer\"==value)return cx.marked=\n\"keyword\",cont(\"typeof\"==value?expressionNoComma:typeexpr);if(\"variable\"==type||\"void\"==value)return cx.marked=\"type\",cont(afterType);if(\"|\"==value||\"\\x26\"==value)return cont(typeexpr);if(\"string\"==type||\"number\"==type||\"atom\"==type)return cont(afterType);if(\"[\"==type)return cont(pushlex(\"]\"),commasep(typeexpr,\"]\",\",\"),poplex,afterType);if(\"{\"==type)return cont(pushlex(\"}\"),commasep(typeprop,\"}\",\",;\"),poplex,afterType);if(\"(\"==type)return cont(commasep(typearg,\")\"),maybeReturnType,afterType);if(\"\\x3c\"==\ntype)return cont(commasep(typeexpr,\"\\x3e\"),typeexpr)}function maybeReturnType(type){if(\"\\x3d\\x3e\"==type)return cont(typeexpr)}function typeprop(type,value){if(\"variable\"==type||\"keyword\"==cx.style)return cx.marked=\"property\",cont(typeprop);if(\"?\"==value||\"number\"==type||\"string\"==type)return cont(typeprop);if(\":\"==type)return cont(typeexpr);if(\"[\"==type)return cont(expect(\"variable\"),maybetypeOrIn,expect(\"]\"),typeprop);if(\"(\"==type)return pass(functiondecl,typeprop)}function typearg(type,value){return\"variable\"==\ntype&&cx.stream.match(/^\\s*[?:]/,!1)||\"?\"==value?cont(typearg):\":\"==type?cont(typeexpr):\"spread\"==type?cont(typearg):pass(typeexpr)}function afterType(type,value){if(\"\\x3c\"==value)return cont(pushlex(\"\\x3e\"),commasep(typeexpr,\"\\x3e\"),poplex,afterType);if(\"|\"==value||\".\"==type||\"\\x26\"==value)return cont(typeexpr);if(\"[\"==type)return cont(typeexpr,expect(\"]\"),afterType);if(\"extends\"==value||\"implements\"==value)return cx.marked=\"keyword\",cont(typeexpr);if(\"?\"==value)return cont(typeexpr,expect(\":\"),\ntypeexpr)}function maybeTypeArgs(_,value){if(\"\\x3c\"==value)return cont(pushlex(\"\\x3e\"),commasep(typeexpr,\"\\x3e\"),poplex,afterType)}function typeparam(){return pass(typeexpr,maybeTypeDefault)}function maybeTypeDefault(_,value){if(\"\\x3d\"==value)return cont(typeexpr)}function vardef(_,value){return\"enum\"==value?(cx.marked=\"keyword\",cont(enumdef)):pass(pattern,maybetype,maybeAssign,vardefCont)}function pattern(type,value){if(isTS&&isModifier(value))return cx.marked=\"keyword\",cont(pattern);if(\"variable\"==\ntype)return register(value),cont();if(\"spread\"==type)return cont(pattern);if(\"[\"==type)return contCommasep(eltpattern,\"]\");if(\"{\"==type)return contCommasep(proppattern,\"}\")}function proppattern(type,value){if(\"variable\"==type&&!cx.stream.match(/^\\s*:/,!1))return register(value),cont(maybeAssign);\"variable\"==type&&(cx.marked=\"property\");return\"spread\"==type?cont(pattern):\"}\"==type?pass():\"[\"==type?cont(expression,expect(\"]\"),expect(\":\"),proppattern):cont(expect(\":\"),pattern,maybeAssign)}function eltpattern(){return pass(pattern,\nmaybeAssign)}function maybeAssign(_type,value){if(\"\\x3d\"==value)return cont(expressionNoComma)}function vardefCont(type){if(\",\"==type)return cont(vardef)}function maybeelse(type,value){if(\"keyword b\"==type&&\"else\"==value)return cont(pushlex(\"form\",\"else\"),statement,poplex)}function forspec(type,value){if(\"await\"==value)return cont(forspec);if(\"(\"==type)return cont(pushlex(\")\"),forspec1,poplex)}function forspec1(type){return\"var\"==type?cont(vardef,forspec2):\"variable\"==type?cont(forspec2):pass(forspec2)}\nfunction forspec2(type,value){return\")\"==type?cont():\";\"==type?cont(forspec2):\"in\"==value||\"of\"==value?(cx.marked=\"keyword\",cont(expression,forspec2)):pass(expression,forspec2)}function functiondef(type,value){if(\"*\"==value)return cx.marked=\"keyword\",cont(functiondef);if(\"variable\"==type)return register(value),cont(functiondef);if(\"(\"==type)return cont(pushcontext,pushlex(\")\"),commasep(funarg,\")\"),poplex,mayberettype,statement,popcontext);if(isTS&&\"\\x3c\"==value)return cont(pushlex(\"\\x3e\"),commasep(typeparam,\n\"\\x3e\"),poplex,functiondef)}function functiondecl(type,value){if(\"*\"==value)return cx.marked=\"keyword\",cont(functiondecl);if(\"variable\"==type)return register(value),cont(functiondecl);if(\"(\"==type)return cont(pushcontext,pushlex(\")\"),commasep(funarg,\")\"),poplex,mayberettype,popcontext);if(isTS&&\"\\x3c\"==value)return cont(pushlex(\"\\x3e\"),commasep(typeparam,\"\\x3e\"),poplex,functiondecl)}function typename(type,value){if(\"keyword\"==type||\"variable\"==type)return cx.marked=\"type\",cont(typename);if(\"\\x3c\"==\nvalue)return cont(pushlex(\"\\x3e\"),commasep(typeparam,\"\\x3e\"),poplex)}function funarg(type,value){\"@\"==value&&cont(expression,funarg);return\"spread\"==type?cont(funarg):isTS&&isModifier(value)?(cx.marked=\"keyword\",cont(funarg)):isTS&&\"this\"==type?cont(maybetype,maybeAssign):pass(pattern,maybetype,maybeAssign)}function classExpression(type,value){return\"variable\"==type?className(type,value):classNameAfter(type,value)}function className(type,value){if(\"variable\"==type)return register(value),cont(classNameAfter)}\nfunction classNameAfter(type,value){if(\"\\x3c\"==value)return cont(pushlex(\"\\x3e\"),commasep(typeparam,\"\\x3e\"),poplex,classNameAfter);if(\"extends\"==value||\"implements\"==value||isTS&&\",\"==type)return\"implements\"==value&&(cx.marked=\"keyword\"),cont(isTS?typeexpr:expression,classNameAfter);if(\"{\"==type)return cont(pushlex(\"}\"),classBody,poplex)}function classBody(type,value){if(\"async\"==type||\"variable\"==type&&(\"static\"==value||\"get\"==value||\"set\"==value||isTS&&isModifier(value))&&cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/,\n!1))return cx.marked=\"keyword\",cont(classBody);if(\"variable\"==type||\"keyword\"==cx.style)return cx.marked=\"property\",cont(classfield,classBody);if(\"number\"==type||\"string\"==type)return cont(classfield,classBody);if(\"[\"==type)return cont(expression,maybetype,expect(\"]\"),classfield,classBody);if(\"*\"==value)return cx.marked=\"keyword\",cont(classBody);if(isTS&&\"(\"==type)return pass(functiondecl,classBody);if(\";\"==type||\",\"==type)return cont(classBody);if(\"}\"==type)return cont();if(\"@\"==value)return cont(expression,\nclassBody)}function classfield(type,value){if(\"?\"==value)return cont(classfield);if(\":\"==type)return cont(typeexpr,maybeAssign);if(\"\\x3d\"==value)return cont(expressionNoComma);type=cx.state.lexical.prev;return pass(type&&\"interface\"==type.info?functiondecl:functiondef)}function afterExport(type,value){return\"*\"==value?(cx.marked=\"keyword\",cont(maybeFrom,expect(\";\"))):\"default\"==value?(cx.marked=\"keyword\",cont(expression,expect(\";\"))):\"{\"==type?cont(commasep(exportField,\"}\"),maybeFrom,expect(\";\")):\npass(statement)}function exportField(type,value){if(\"as\"==value)return cx.marked=\"keyword\",cont(expect(\"variable\"));if(\"variable\"==type)return pass(expressionNoComma,exportField)}function afterImport(type){return\"string\"==type?cont():\"(\"==type?pass(expression):pass(importSpec,maybeMoreImports,maybeFrom)}function importSpec(type,value){if(\"{\"==type)return contCommasep(importSpec,\"}\");\"variable\"==type&&register(value);\"*\"==value&&(cx.marked=\"keyword\");return cont(maybeAs)}function maybeMoreImports(type){if(\",\"==\ntype)return cont(importSpec,maybeMoreImports)}function maybeAs(_type,value){if(\"as\"==value)return cx.marked=\"keyword\",cont(importSpec)}function maybeFrom(_type,value){if(\"from\"==value)return cx.marked=\"keyword\",cont(expression)}function arrayLiteral(type){return\"]\"==type?cont():pass(commasep(expressionNoComma,\"]\"))}function enumdef(){return pass(pushlex(\"form\"),pattern,expect(\"{\"),pushlex(\"}\"),commasep(enummember,\"}\"),poplex,poplex)}function enummember(){return pass(pattern,maybeAssign)}function expressionAllowed(stream,\nstate,backUp){return state.tokenize==tokenBase&&/^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType)||\"quasi\"==state.lastType&&/\\{\\s*$/.test(stream.string.slice(0,stream.pos-(backUp||0)))}var indentUnit=config.indentUnit,statementIndent=parserConfig.statementIndent,jsonldMode=parserConfig.jsonld,jsonMode=parserConfig.json||jsonldMode,isTS=parserConfig.typescript,wordRE=parserConfig.wordCharacters||/[\\w$\\xa1-\\uffff]/,keywords=function(){function kw(type){return{type:type,\nstyle:\"keyword\"}}var A=kw(\"keyword a\"),B=kw(\"keyword b\"),C=kw(\"keyword c\"),D=kw(\"keyword d\"),operator=kw(\"operator\"),atom={type:\"atom\",style:\"atom\"};return{\"if\":kw(\"if\"),\"while\":A,\"with\":A,\"else\":B,\"do\":B,\"try\":B,\"finally\":B,\"return\":D,\"break\":D,\"continue\":D,\"new\":kw(\"new\"),\"delete\":C,\"void\":C,\"throw\":C,\"debugger\":kw(\"debugger\"),\"var\":kw(\"var\"),\"const\":kw(\"var\"),let:kw(\"var\"),\"function\":kw(\"function\"),\"catch\":kw(\"catch\"),\"for\":kw(\"for\"),\"switch\":kw(\"switch\"),\"case\":kw(\"case\"),\"default\":kw(\"default\"),\n\"in\":operator,\"typeof\":operator,\"instanceof\":operator,\"true\":atom,\"false\":atom,\"null\":atom,undefined:atom,NaN:atom,Infinity:atom,\"this\":kw(\"this\"),\"class\":kw(\"class\"),\"super\":kw(\"atom\"),yield:C,\"export\":kw(\"export\"),\"import\":kw(\"import\"),\"extends\":C,await:C}}(),isOperatorChar=/[+\\-*&%=<>!?|~^@]/,isJsonldKeyword=/^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/,type$jscomp$1,content,atomicTypes={atom:!0,number:!0,variable:!0,string:!0,regexp:!0,\"this\":!0,\"jsonld-keyword\":!0},\ncx={state:null,column:null,marked:null,cc:null},defaultVars=new Var(\"this\",new Var(\"arguments\",null));popcontext.lex=!0;poplex.lex=!0;return{startState:function(basecolumn){basecolumn={tokenize:tokenBase,lastType:\"sof\",cc:[],lexical:new JSLexical((basecolumn||0)-indentUnit,0,\"block\",!1),localVars:parserConfig.localVars,context:parserConfig.localVars&&new Context(null,null,!1),indented:basecolumn||0};parserConfig.globalVars&&\"object\"==typeof parserConfig.globalVars&&(basecolumn.globalVars=parserConfig.globalVars);\nreturn basecolumn},token:function(stream,state){stream.sol()&&(state.lexical.hasOwnProperty(\"align\")||(state.lexical.align=!1),state.indented=stream.indentation(),findFatArrow(stream,state));if(state.tokenize!=tokenComment&&stream.eatSpace())return null;var style=state.tokenize(stream,state);if(\"comment\"==type$jscomp$1)return style;state.lastType=\"operator\"!=type$jscomp$1||\"++\"!=content&&\"--\"!=content?type$jscomp$1:\"incdec\";a:{var type=type$jscomp$1,content$jscomp$0=content,cc=state.cc;cx.state=state;\ncx.stream=stream;cx.marked=null;cx.cc=cc;cx.style=style;state.lexical.hasOwnProperty(\"align\")||(state.lexical.align=!0);for(;;)if((cc.length?cc.pop():jsonMode?expression:statement)(type,content$jscomp$0)){for(;cc.length&&cc[cc.length-1].lex;)cc.pop()();if(cx.marked){style=cx.marked;break a}if(stream=\"variable\"==type)b:{for(stream=state.localVars;stream;stream=stream.next)if(stream.name==content$jscomp$0){stream=!0;break b}for(state=state.context;state;state=state.prev)for(stream=state.vars;stream;stream=\nstream.next)if(stream.name==content$jscomp$0){stream=!0;break b}stream=void 0}if(stream){style=\"variable-2\";break a}break a}}return style},indent:function(state,textAfter){if(state.tokenize==tokenComment||state.tokenize==tokenQuasi)return CodeMirror.Pass;if(state.tokenize!=tokenBase)return 0;var firstChar=textAfter&&textAfter.charAt(0),lexical=state.lexical,top;if(!/^\\s*else\\b/.test(textAfter))for(var i=state.cc.length-1;0<=i;--i){var c=state.cc[i];if(c==poplex)lexical=lexical.prev;else if(c!=maybeelse)break}for(;!(\"stat\"!=\nlexical.type&&\"form\"!=lexical.type||\"}\"!=firstChar&&(!(top=state.cc[state.cc.length-1])||top!=maybeoperatorComma&&top!=maybeoperatorNoComma||/^[,\\.=+\\-*:?[\\(]/.test(textAfter)));)lexical=lexical.prev;statementIndent&&\")\"==lexical.type&&\"stat\"==lexical.prev.type&&(lexical=lexical.prev);top=lexical.type;i=firstChar==top;return\"vardef\"==top?lexical.indented+(\"operator\"==state.lastType||\",\"==state.lastType?lexical.info.length+1:0):\"form\"==top&&\"{\"==firstChar?lexical.indented:\"form\"==top?lexical.indented+\nindentUnit:\"stat\"==top?(firstChar=lexical.indented,state=\"operator\"==state.lastType||\",\"==state.lastType||isOperatorChar.test(textAfter.charAt(0))||/[,.]/.test(textAfter.charAt(0)),firstChar+(state?statementIndent||indentUnit:0)):\"switch\"!=lexical.info||i||0==parserConfig.doubleIndentSwitch?lexical.align?lexical.column+(i?0:1):lexical.indented+(i?0:indentUnit):lexical.indented+(/^(?:case|default)\\b/.test(textAfter)?indentUnit:2*indentUnit)},electricInput:/^\\s*(?:case .*?:|default:|\\{|\\})$/,blockCommentStart:jsonMode?\nnull:\"/*\",blockCommentEnd:jsonMode?null:\"*/\",blockCommentContinue:jsonMode?null:\" * \",lineComment:jsonMode?null:\"//\",fold:\"brace\",closeBrackets:\"()[]{}''\\\"\\\"``\",helperType:jsonMode?\"json\":\"javascript\",jsonldMode:jsonldMode,jsonMode:jsonMode,expressionAllowed:expressionAllowed,skipExpression:function(state){var top=state.cc[state.cc.length-1];top!=expression&&top!=expressionNoComma||state.cc.pop()}}});CodeMirror.registerHelper(\"wordChars\",\"javascript\",/[\\w$]/);CodeMirror.defineMIME(\"text/javascript\",\n\"javascript\");CodeMirror.defineMIME(\"text/ecmascript\",\"javascript\");CodeMirror.defineMIME(\"application/javascript\",\"javascript\");CodeMirror.defineMIME(\"application/x-javascript\",\"javascript\");CodeMirror.defineMIME(\"application/ecmascript\",\"javascript\");CodeMirror.defineMIME(\"application/json\",{name:\"javascript\",json:!0});CodeMirror.defineMIME(\"application/x-json\",{name:\"javascript\",json:!0});CodeMirror.defineMIME(\"application/ld+json\",{name:\"javascript\",jsonld:!0});CodeMirror.defineMIME(\"text/typescript\",\n{name:\"javascript\",typescript:!0});CodeMirror.defineMIME(\"application/typescript\",{name:\"javascript\",typescript:!0})})}","~:source","shadow$provide[\"module$node_modules$codemirror$mode$javascript$javascript\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true, \"this\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), forspec, statement, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    if (type == \"import\") return cont(expression);\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(expression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\", \",;\"), poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      var top = state.cc[state.cc.length - 1]\n      if (top == expression || top == expressionNoComma) state.cc.pop()\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/x-json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/ld+json\", {name: \"javascript\", jsonld: true});\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$codemirror$lib$codemirror"]],"~:properties",["^5",["json","stream","blockCommentEnd","pos","align","next","token","tokenize","jsonld","blockCommentStart","localVars","info","indented","marked","block","electricInput","fatArrowAt","lastType","name","jsonldMode","style","jsonMode","typescript","expressionAllowed","context","indent","prev","startState","fold","lex","skipExpression","lexical","globalVars","column","type","state","closeBrackets","blockCommentContinue","helperType","lineComment","cc","vars"]],"~:compiled-at",1605285864575,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$codemirror$mode$javascript$javascript.js\",\n\"lineCount\":54,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/codemirror/mode/javascript/javascript.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$codemirror$mode$javascript$javascript\\\"] = function(global,require,module,exports) {\\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\\n// Distributed under an MIT license: https://codemirror.net/LICENSE\\n\\n(function(mod) {\\n  if (typeof exports == \\\"object\\\" && typeof module == \\\"object\\\") // CommonJS\\n    mod(require(\\\"../../lib/codemirror\\\"));\\n  else if (typeof define == \\\"function\\\" && define.amd) // AMD\\n    define([\\\"../../lib/codemirror\\\"], mod);\\n  else // Plain browser env\\n    mod(CodeMirror);\\n})(function(CodeMirror) {\\n\\\"use strict\\\";\\n\\nCodeMirror.defineMode(\\\"javascript\\\", function(config, parserConfig) {\\n  var indentUnit = config.indentUnit;\\n  var statementIndent = parserConfig.statementIndent;\\n  var jsonldMode = parserConfig.jsonld;\\n  var jsonMode = parserConfig.json || jsonldMode;\\n  var isTS = parserConfig.typescript;\\n  var wordRE = parserConfig.wordCharacters || /[\\\\w$\\\\xa1-\\\\uffff]/;\\n\\n  // Tokenizer\\n\\n  var keywords = function(){\\n    function kw(type) {return {type: type, style: \\\"keyword\\\"};}\\n    var A = kw(\\\"keyword a\\\"), B = kw(\\\"keyword b\\\"), C = kw(\\\"keyword c\\\"), D = kw(\\\"keyword d\\\");\\n    var operator = kw(\\\"operator\\\"), atom = {type: \\\"atom\\\", style: \\\"atom\\\"};\\n\\n    return {\\n      \\\"if\\\": kw(\\\"if\\\"), \\\"while\\\": A, \\\"with\\\": A, \\\"else\\\": B, \\\"do\\\": B, \\\"try\\\": B, \\\"finally\\\": B,\\n      \\\"return\\\": D, \\\"break\\\": D, \\\"continue\\\": D, \\\"new\\\": kw(\\\"new\\\"), \\\"delete\\\": C, \\\"void\\\": C, \\\"throw\\\": C,\\n      \\\"debugger\\\": kw(\\\"debugger\\\"), \\\"var\\\": kw(\\\"var\\\"), \\\"const\\\": kw(\\\"var\\\"), \\\"let\\\": kw(\\\"var\\\"),\\n      \\\"function\\\": kw(\\\"function\\\"), \\\"catch\\\": kw(\\\"catch\\\"),\\n      \\\"for\\\": kw(\\\"for\\\"), \\\"switch\\\": kw(\\\"switch\\\"), \\\"case\\\": kw(\\\"case\\\"), \\\"default\\\": kw(\\\"default\\\"),\\n      \\\"in\\\": operator, \\\"typeof\\\": operator, \\\"instanceof\\\": operator,\\n      \\\"true\\\": atom, \\\"false\\\": atom, \\\"null\\\": atom, \\\"undefined\\\": atom, \\\"NaN\\\": atom, \\\"Infinity\\\": atom,\\n      \\\"this\\\": kw(\\\"this\\\"), \\\"class\\\": kw(\\\"class\\\"), \\\"super\\\": kw(\\\"atom\\\"),\\n      \\\"yield\\\": C, \\\"export\\\": kw(\\\"export\\\"), \\\"import\\\": kw(\\\"import\\\"), \\\"extends\\\": C,\\n      \\\"await\\\": C\\n    };\\n  }();\\n\\n  var isOperatorChar = /[+\\\\-*&%=<>!?|~^@]/;\\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\\\"/;\\n\\n  function readRegexp(stream) {\\n    var escaped = false, next, inSet = false;\\n    while ((next = stream.next()) != null) {\\n      if (!escaped) {\\n        if (next == \\\"/\\\" && !inSet) return;\\n        if (next == \\\"[\\\") inSet = true;\\n        else if (inSet && next == \\\"]\\\") inSet = false;\\n      }\\n      escaped = !escaped && next == \\\"\\\\\\\\\\\";\\n    }\\n  }\\n\\n  // Used as scratch variables to communicate multiple values without\\n  // consing up tons of objects.\\n  var type, content;\\n  function ret(tp, style, cont) {\\n    type = tp; content = cont;\\n    return style;\\n  }\\n  function tokenBase(stream, state) {\\n    var ch = stream.next();\\n    if (ch == '\\\"' || ch == \\\"'\\\") {\\n      state.tokenize = tokenString(ch);\\n      return state.tokenize(stream, state);\\n    } else if (ch == \\\".\\\" && stream.match(/^\\\\d[\\\\d_]*(?:[eE][+\\\\-]?[\\\\d_]+)?/)) {\\n      return ret(\\\"number\\\", \\\"number\\\");\\n    } else if (ch == \\\".\\\" && stream.match(\\\"..\\\")) {\\n      return ret(\\\"spread\\\", \\\"meta\\\");\\n    } else if (/[\\\\[\\\\]{}\\\\(\\\\),;\\\\:\\\\.]/.test(ch)) {\\n      return ret(ch);\\n    } else if (ch == \\\"=\\\" && stream.eat(\\\">\\\")) {\\n      return ret(\\\"=>\\\", \\\"operator\\\");\\n    } else if (ch == \\\"0\\\" && stream.match(/^(?:x[\\\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\\n      return ret(\\\"number\\\", \\\"number\\\");\\n    } else if (/\\\\d/.test(ch)) {\\n      stream.match(/^[\\\\d_]*(?:n|(?:\\\\.[\\\\d_]*)?(?:[eE][+\\\\-]?[\\\\d_]+)?)?/);\\n      return ret(\\\"number\\\", \\\"number\\\");\\n    } else if (ch == \\\"/\\\") {\\n      if (stream.eat(\\\"*\\\")) {\\n        state.tokenize = tokenComment;\\n        return tokenComment(stream, state);\\n      } else if (stream.eat(\\\"/\\\")) {\\n        stream.skipToEnd();\\n        return ret(\\\"comment\\\", \\\"comment\\\");\\n      } else if (expressionAllowed(stream, state, 1)) {\\n        readRegexp(stream);\\n        stream.match(/^\\\\b(([gimyus])(?![gimyus]*\\\\2))+\\\\b/);\\n        return ret(\\\"regexp\\\", \\\"string-2\\\");\\n      } else {\\n        stream.eat(\\\"=\\\");\\n        return ret(\\\"operator\\\", \\\"operator\\\", stream.current());\\n      }\\n    } else if (ch == \\\"`\\\") {\\n      state.tokenize = tokenQuasi;\\n      return tokenQuasi(stream, state);\\n    } else if (ch == \\\"#\\\" && stream.peek() == \\\"!\\\") {\\n      stream.skipToEnd();\\n      return ret(\\\"meta\\\", \\\"meta\\\");\\n    } else if (ch == \\\"#\\\" && stream.eatWhile(wordRE)) {\\n      return ret(\\\"variable\\\", \\\"property\\\")\\n    } else if (ch == \\\"<\\\" && stream.match(\\\"!--\\\") ||\\n               (ch == \\\"-\\\" && stream.match(\\\"->\\\") && !/\\\\S/.test(stream.string.slice(0, stream.start)))) {\\n      stream.skipToEnd()\\n      return ret(\\\"comment\\\", \\\"comment\\\")\\n    } else if (isOperatorChar.test(ch)) {\\n      if (ch != \\\">\\\" || !state.lexical || state.lexical.type != \\\">\\\") {\\n        if (stream.eat(\\\"=\\\")) {\\n          if (ch == \\\"!\\\" || ch == \\\"=\\\") stream.eat(\\\"=\\\")\\n        } else if (/[<>*+\\\\-|&?]/.test(ch)) {\\n          stream.eat(ch)\\n          if (ch == \\\">\\\") stream.eat(ch)\\n        }\\n      }\\n      if (ch == \\\"?\\\" && stream.eat(\\\".\\\")) return ret(\\\".\\\")\\n      return ret(\\\"operator\\\", \\\"operator\\\", stream.current());\\n    } else if (wordRE.test(ch)) {\\n      stream.eatWhile(wordRE);\\n      var word = stream.current()\\n      if (state.lastType != \\\".\\\") {\\n        if (keywords.propertyIsEnumerable(word)) {\\n          var kw = keywords[word]\\n          return ret(kw.type, kw.style, word)\\n        }\\n        if (word == \\\"async\\\" && stream.match(/^(\\\\s|\\\\/\\\\*([^*]|\\\\*(?!\\\\/))*?\\\\*\\\\/)*[\\\\[\\\\(\\\\w]/, false))\\n          return ret(\\\"async\\\", \\\"keyword\\\", word)\\n      }\\n      return ret(\\\"variable\\\", \\\"variable\\\", word)\\n    }\\n  }\\n\\n  function tokenString(quote) {\\n    return function(stream, state) {\\n      var escaped = false, next;\\n      if (jsonldMode && stream.peek() == \\\"@\\\" && stream.match(isJsonldKeyword)){\\n        state.tokenize = tokenBase;\\n        return ret(\\\"jsonld-keyword\\\", \\\"meta\\\");\\n      }\\n      while ((next = stream.next()) != null) {\\n        if (next == quote && !escaped) break;\\n        escaped = !escaped && next == \\\"\\\\\\\\\\\";\\n      }\\n      if (!escaped) state.tokenize = tokenBase;\\n      return ret(\\\"string\\\", \\\"string\\\");\\n    };\\n  }\\n\\n  function tokenComment(stream, state) {\\n    var maybeEnd = false, ch;\\n    while (ch = stream.next()) {\\n      if (ch == \\\"/\\\" && maybeEnd) {\\n        state.tokenize = tokenBase;\\n        break;\\n      }\\n      maybeEnd = (ch == \\\"*\\\");\\n    }\\n    return ret(\\\"comment\\\", \\\"comment\\\");\\n  }\\n\\n  function tokenQuasi(stream, state) {\\n    var escaped = false, next;\\n    while ((next = stream.next()) != null) {\\n      if (!escaped && (next == \\\"`\\\" || next == \\\"$\\\" && stream.eat(\\\"{\\\"))) {\\n        state.tokenize = tokenBase;\\n        break;\\n      }\\n      escaped = !escaped && next == \\\"\\\\\\\\\\\";\\n    }\\n    return ret(\\\"quasi\\\", \\\"string-2\\\", stream.current());\\n  }\\n\\n  var brackets = \\\"([{}])\\\";\\n  // This is a crude lookahead trick to try and notice that we're\\n  // parsing the argument patterns for a fat-arrow function before we\\n  // actually hit the arrow token. It only works if the arrow is on\\n  // the same line as the arguments and there's no strange noise\\n  // (comments) in between. Fallback is to only notice when we hit the\\n  // arrow, and not declare the arguments as locals for the arrow\\n  // body.\\n  function findFatArrow(stream, state) {\\n    if (state.fatArrowAt) state.fatArrowAt = null;\\n    var arrow = stream.string.indexOf(\\\"=>\\\", stream.start);\\n    if (arrow < 0) return;\\n\\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\\n      var m = /:\\\\s*(?:\\\\w+(?:<[^>]*>|\\\\[\\\\])?|\\\\{[^}]*\\\\})\\\\s*$/.exec(stream.string.slice(stream.start, arrow))\\n      if (m) arrow = m.index\\n    }\\n\\n    var depth = 0, sawSomething = false;\\n    for (var pos = arrow - 1; pos >= 0; --pos) {\\n      var ch = stream.string.charAt(pos);\\n      var bracket = brackets.indexOf(ch);\\n      if (bracket >= 0 && bracket < 3) {\\n        if (!depth) { ++pos; break; }\\n        if (--depth == 0) { if (ch == \\\"(\\\") sawSomething = true; break; }\\n      } else if (bracket >= 3 && bracket < 6) {\\n        ++depth;\\n      } else if (wordRE.test(ch)) {\\n        sawSomething = true;\\n      } else if (/[\\\"'\\\\/`]/.test(ch)) {\\n        for (;; --pos) {\\n          if (pos == 0) return\\n          var next = stream.string.charAt(pos - 1)\\n          if (next == ch && stream.string.charAt(pos - 2) != \\\"\\\\\\\\\\\") { pos--; break }\\n        }\\n      } else if (sawSomething && !depth) {\\n        ++pos;\\n        break;\\n      }\\n    }\\n    if (sawSomething && !depth) state.fatArrowAt = pos;\\n  }\\n\\n  // Parser\\n\\n  var atomicTypes = {\\\"atom\\\": true, \\\"number\\\": true, \\\"variable\\\": true, \\\"string\\\": true, \\\"regexp\\\": true, \\\"this\\\": true, \\\"jsonld-keyword\\\": true};\\n\\n  function JSLexical(indented, column, type, align, prev, info) {\\n    this.indented = indented;\\n    this.column = column;\\n    this.type = type;\\n    this.prev = prev;\\n    this.info = info;\\n    if (align != null) this.align = align;\\n  }\\n\\n  function inScope(state, varname) {\\n    for (var v = state.localVars; v; v = v.next)\\n      if (v.name == varname) return true;\\n    for (var cx = state.context; cx; cx = cx.prev) {\\n      for (var v = cx.vars; v; v = v.next)\\n        if (v.name == varname) return true;\\n    }\\n  }\\n\\n  function parseJS(state, style, type, content, stream) {\\n    var cc = state.cc;\\n    // Communicate our context to the combinators.\\n    // (Less wasteful than consing up a hundred closures on every call.)\\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\\n\\n    if (!state.lexical.hasOwnProperty(\\\"align\\\"))\\n      state.lexical.align = true;\\n\\n    while(true) {\\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\\n      if (combinator(type, content)) {\\n        while(cc.length && cc[cc.length - 1].lex)\\n          cc.pop()();\\n        if (cx.marked) return cx.marked;\\n        if (type == \\\"variable\\\" && inScope(state, content)) return \\\"variable-2\\\";\\n        return style;\\n      }\\n    }\\n  }\\n\\n  // Combinator utils\\n\\n  var cx = {state: null, column: null, marked: null, cc: null};\\n  function pass() {\\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\\n  }\\n  function cont() {\\n    pass.apply(null, arguments);\\n    return true;\\n  }\\n  function inList(name, list) {\\n    for (var v = list; v; v = v.next) if (v.name == name) return true\\n    return false;\\n  }\\n  function register(varname) {\\n    var state = cx.state;\\n    cx.marked = \\\"def\\\";\\n    if (state.context) {\\n      if (state.lexical.info == \\\"var\\\" && state.context && state.context.block) {\\n        // FIXME function decls are also not block scoped\\n        var newContext = registerVarScoped(varname, state.context)\\n        if (newContext != null) {\\n          state.context = newContext\\n          return\\n        }\\n      } else if (!inList(varname, state.localVars)) {\\n        state.localVars = new Var(varname, state.localVars)\\n        return\\n      }\\n    }\\n    // Fall through means this is global\\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\\n      state.globalVars = new Var(varname, state.globalVars)\\n  }\\n  function registerVarScoped(varname, context) {\\n    if (!context) {\\n      return null\\n    } else if (context.block) {\\n      var inner = registerVarScoped(varname, context.prev)\\n      if (!inner) return null\\n      if (inner == context.prev) return context\\n      return new Context(inner, context.vars, true)\\n    } else if (inList(varname, context.vars)) {\\n      return context\\n    } else {\\n      return new Context(context.prev, new Var(varname, context.vars), false)\\n    }\\n  }\\n\\n  function isModifier(name) {\\n    return name == \\\"public\\\" || name == \\\"private\\\" || name == \\\"protected\\\" || name == \\\"abstract\\\" || name == \\\"readonly\\\"\\n  }\\n\\n  // Combinators\\n\\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\\n  function Var(name, next) { this.name = name; this.next = next }\\n\\n  var defaultVars = new Var(\\\"this\\\", new Var(\\\"arguments\\\", null))\\n  function pushcontext() {\\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\\n    cx.state.localVars = defaultVars\\n  }\\n  function pushblockcontext() {\\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\\n    cx.state.localVars = null\\n  }\\n  function popcontext() {\\n    cx.state.localVars = cx.state.context.vars\\n    cx.state.context = cx.state.context.prev\\n  }\\n  popcontext.lex = true\\n  function pushlex(type, info) {\\n    var result = function() {\\n      var state = cx.state, indent = state.indented;\\n      if (state.lexical.type == \\\"stat\\\") indent = state.lexical.indented;\\n      else for (var outer = state.lexical; outer && outer.type == \\\")\\\" && outer.align; outer = outer.prev)\\n        indent = outer.indented;\\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\\n    };\\n    result.lex = true;\\n    return result;\\n  }\\n  function poplex() {\\n    var state = cx.state;\\n    if (state.lexical.prev) {\\n      if (state.lexical.type == \\\")\\\")\\n        state.indented = state.lexical.indented;\\n      state.lexical = state.lexical.prev;\\n    }\\n  }\\n  poplex.lex = true;\\n\\n  function expect(wanted) {\\n    function exp(type) {\\n      if (type == wanted) return cont();\\n      else if (wanted == \\\";\\\" || type == \\\"}\\\" || type == \\\")\\\" || type == \\\"]\\\") return pass();\\n      else return cont(exp);\\n    };\\n    return exp;\\n  }\\n\\n  function statement(type, value) {\\n    if (type == \\\"var\\\") return cont(pushlex(\\\"vardef\\\", value), vardef, expect(\\\";\\\"), poplex);\\n    if (type == \\\"keyword a\\\") return cont(pushlex(\\\"form\\\"), parenExpr, statement, poplex);\\n    if (type == \\\"keyword b\\\") return cont(pushlex(\\\"form\\\"), statement, poplex);\\n    if (type == \\\"keyword d\\\") return cx.stream.match(/^\\\\s*$/, false) ? cont() : cont(pushlex(\\\"stat\\\"), maybeexpression, expect(\\\";\\\"), poplex);\\n    if (type == \\\"debugger\\\") return cont(expect(\\\";\\\"));\\n    if (type == \\\"{\\\") return cont(pushlex(\\\"}\\\"), pushblockcontext, block, poplex, popcontext);\\n    if (type == \\\";\\\") return cont();\\n    if (type == \\\"if\\\") {\\n      if (cx.state.lexical.info == \\\"else\\\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\\n        cx.state.cc.pop()();\\n      return cont(pushlex(\\\"form\\\"), parenExpr, statement, poplex, maybeelse);\\n    }\\n    if (type == \\\"function\\\") return cont(functiondef);\\n    if (type == \\\"for\\\") return cont(pushlex(\\\"form\\\"), forspec, statement, poplex);\\n    if (type == \\\"class\\\" || (isTS && value == \\\"interface\\\")) {\\n      cx.marked = \\\"keyword\\\"\\n      return cont(pushlex(\\\"form\\\", type == \\\"class\\\" ? type : value), className, poplex)\\n    }\\n    if (type == \\\"variable\\\") {\\n      if (isTS && value == \\\"declare\\\") {\\n        cx.marked = \\\"keyword\\\"\\n        return cont(statement)\\n      } else if (isTS && (value == \\\"module\\\" || value == \\\"enum\\\" || value == \\\"type\\\") && cx.stream.match(/^\\\\s*\\\\w/, false)) {\\n        cx.marked = \\\"keyword\\\"\\n        if (value == \\\"enum\\\") return cont(enumdef);\\n        else if (value == \\\"type\\\") return cont(typename, expect(\\\"operator\\\"), typeexpr, expect(\\\";\\\"));\\n        else return cont(pushlex(\\\"form\\\"), pattern, expect(\\\"{\\\"), pushlex(\\\"}\\\"), block, poplex, poplex)\\n      } else if (isTS && value == \\\"namespace\\\") {\\n        cx.marked = \\\"keyword\\\"\\n        return cont(pushlex(\\\"form\\\"), expression, statement, poplex)\\n      } else if (isTS && value == \\\"abstract\\\") {\\n        cx.marked = \\\"keyword\\\"\\n        return cont(statement)\\n      } else {\\n        return cont(pushlex(\\\"stat\\\"), maybelabel);\\n      }\\n    }\\n    if (type == \\\"switch\\\") return cont(pushlex(\\\"form\\\"), parenExpr, expect(\\\"{\\\"), pushlex(\\\"}\\\", \\\"switch\\\"), pushblockcontext,\\n                                      block, poplex, poplex, popcontext);\\n    if (type == \\\"case\\\") return cont(expression, expect(\\\":\\\"));\\n    if (type == \\\"default\\\") return cont(expect(\\\":\\\"));\\n    if (type == \\\"catch\\\") return cont(pushlex(\\\"form\\\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\\n    if (type == \\\"export\\\") return cont(pushlex(\\\"stat\\\"), afterExport, poplex);\\n    if (type == \\\"import\\\") return cont(pushlex(\\\"stat\\\"), afterImport, poplex);\\n    if (type == \\\"async\\\") return cont(statement)\\n    if (value == \\\"@\\\") return cont(expression, statement)\\n    return pass(pushlex(\\\"stat\\\"), expression, expect(\\\";\\\"), poplex);\\n  }\\n  function maybeCatchBinding(type) {\\n    if (type == \\\"(\\\") return cont(funarg, expect(\\\")\\\"))\\n  }\\n  function expression(type, value) {\\n    return expressionInner(type, value, false);\\n  }\\n  function expressionNoComma(type, value) {\\n    return expressionInner(type, value, true);\\n  }\\n  function parenExpr(type) {\\n    if (type != \\\"(\\\") return pass()\\n    return cont(pushlex(\\\")\\\"), maybeexpression, expect(\\\")\\\"), poplex)\\n  }\\n  function expressionInner(type, value, noComma) {\\n    if (cx.state.fatArrowAt == cx.stream.start) {\\n      var body = noComma ? arrowBodyNoComma : arrowBody;\\n      if (type == \\\"(\\\") return cont(pushcontext, pushlex(\\\")\\\"), commasep(funarg, \\\")\\\"), poplex, expect(\\\"=>\\\"), body, popcontext);\\n      else if (type == \\\"variable\\\") return pass(pushcontext, pattern, expect(\\\"=>\\\"), body, popcontext);\\n    }\\n\\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\\n    if (type == \\\"function\\\") return cont(functiondef, maybeop);\\n    if (type == \\\"class\\\" || (isTS && value == \\\"interface\\\")) { cx.marked = \\\"keyword\\\"; return cont(pushlex(\\\"form\\\"), classExpression, poplex); }\\n    if (type == \\\"keyword c\\\" || type == \\\"async\\\") return cont(noComma ? expressionNoComma : expression);\\n    if (type == \\\"(\\\") return cont(pushlex(\\\")\\\"), maybeexpression, expect(\\\")\\\"), poplex, maybeop);\\n    if (type == \\\"operator\\\" || type == \\\"spread\\\") return cont(noComma ? expressionNoComma : expression);\\n    if (type == \\\"[\\\") return cont(pushlex(\\\"]\\\"), arrayLiteral, poplex, maybeop);\\n    if (type == \\\"{\\\") return contCommasep(objprop, \\\"}\\\", null, maybeop);\\n    if (type == \\\"quasi\\\") return pass(quasi, maybeop);\\n    if (type == \\\"new\\\") return cont(maybeTarget(noComma));\\n    if (type == \\\"import\\\") return cont(expression);\\n    return cont();\\n  }\\n  function maybeexpression(type) {\\n    if (type.match(/[;\\\\}\\\\)\\\\],]/)) return pass();\\n    return pass(expression);\\n  }\\n\\n  function maybeoperatorComma(type, value) {\\n    if (type == \\\",\\\") return cont(maybeexpression);\\n    return maybeoperatorNoComma(type, value, false);\\n  }\\n  function maybeoperatorNoComma(type, value, noComma) {\\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\\n    var expr = noComma == false ? expression : expressionNoComma;\\n    if (type == \\\"=>\\\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\\n    if (type == \\\"operator\\\") {\\n      if (/\\\\+\\\\+|--/.test(value) || isTS && value == \\\"!\\\") return cont(me);\\n      if (isTS && value == \\\"<\\\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\\\s*\\\\(/, false))\\n        return cont(pushlex(\\\">\\\"), commasep(typeexpr, \\\">\\\"), poplex, me);\\n      if (value == \\\"?\\\") return cont(expression, expect(\\\":\\\"), expr);\\n      return cont(expr);\\n    }\\n    if (type == \\\"quasi\\\") { return pass(quasi, me); }\\n    if (type == \\\";\\\") return;\\n    if (type == \\\"(\\\") return contCommasep(expressionNoComma, \\\")\\\", \\\"call\\\", me);\\n    if (type == \\\".\\\") return cont(property, me);\\n    if (type == \\\"[\\\") return cont(pushlex(\\\"]\\\"), maybeexpression, expect(\\\"]\\\"), poplex, me);\\n    if (isTS && value == \\\"as\\\") { cx.marked = \\\"keyword\\\"; return cont(typeexpr, me) }\\n    if (type == \\\"regexp\\\") {\\n      cx.state.lastType = cx.marked = \\\"operator\\\"\\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\\n      return cont(expr)\\n    }\\n  }\\n  function quasi(type, value) {\\n    if (type != \\\"quasi\\\") return pass();\\n    if (value.slice(value.length - 2) != \\\"${\\\") return cont(quasi);\\n    return cont(expression, continueQuasi);\\n  }\\n  function continueQuasi(type) {\\n    if (type == \\\"}\\\") {\\n      cx.marked = \\\"string-2\\\";\\n      cx.state.tokenize = tokenQuasi;\\n      return cont(quasi);\\n    }\\n  }\\n  function arrowBody(type) {\\n    findFatArrow(cx.stream, cx.state);\\n    return pass(type == \\\"{\\\" ? statement : expression);\\n  }\\n  function arrowBodyNoComma(type) {\\n    findFatArrow(cx.stream, cx.state);\\n    return pass(type == \\\"{\\\" ? statement : expressionNoComma);\\n  }\\n  function maybeTarget(noComma) {\\n    return function(type) {\\n      if (type == \\\".\\\") return cont(noComma ? targetNoComma : target);\\n      else if (type == \\\"variable\\\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\\n      else return pass(noComma ? expressionNoComma : expression);\\n    };\\n  }\\n  function target(_, value) {\\n    if (value == \\\"target\\\") { cx.marked = \\\"keyword\\\"; return cont(maybeoperatorComma); }\\n  }\\n  function targetNoComma(_, value) {\\n    if (value == \\\"target\\\") { cx.marked = \\\"keyword\\\"; return cont(maybeoperatorNoComma); }\\n  }\\n  function maybelabel(type) {\\n    if (type == \\\":\\\") return cont(poplex, statement);\\n    return pass(maybeoperatorComma, expect(\\\";\\\"), poplex);\\n  }\\n  function property(type) {\\n    if (type == \\\"variable\\\") {cx.marked = \\\"property\\\"; return cont();}\\n  }\\n  function objprop(type, value) {\\n    if (type == \\\"async\\\") {\\n      cx.marked = \\\"property\\\";\\n      return cont(objprop);\\n    } else if (type == \\\"variable\\\" || cx.style == \\\"keyword\\\") {\\n      cx.marked = \\\"property\\\";\\n      if (value == \\\"get\\\" || value == \\\"set\\\") return cont(getterSetter);\\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\\\s*:\\\\s*/, false)))\\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\\n      return cont(afterprop);\\n    } else if (type == \\\"number\\\" || type == \\\"string\\\") {\\n      cx.marked = jsonldMode ? \\\"property\\\" : (cx.style + \\\" property\\\");\\n      return cont(afterprop);\\n    } else if (type == \\\"jsonld-keyword\\\") {\\n      return cont(afterprop);\\n    } else if (isTS && isModifier(value)) {\\n      cx.marked = \\\"keyword\\\"\\n      return cont(objprop)\\n    } else if (type == \\\"[\\\") {\\n      return cont(expression, maybetype, expect(\\\"]\\\"), afterprop);\\n    } else if (type == \\\"spread\\\") {\\n      return cont(expressionNoComma, afterprop);\\n    } else if (value == \\\"*\\\") {\\n      cx.marked = \\\"keyword\\\";\\n      return cont(objprop);\\n    } else if (type == \\\":\\\") {\\n      return pass(afterprop)\\n    }\\n  }\\n  function getterSetter(type) {\\n    if (type != \\\"variable\\\") return pass(afterprop);\\n    cx.marked = \\\"property\\\";\\n    return cont(functiondef);\\n  }\\n  function afterprop(type) {\\n    if (type == \\\":\\\") return cont(expressionNoComma);\\n    if (type == \\\"(\\\") return pass(functiondef);\\n  }\\n  function commasep(what, end, sep) {\\n    function proceed(type, value) {\\n      if (sep ? sep.indexOf(type) > -1 : type == \\\",\\\") {\\n        var lex = cx.state.lexical;\\n        if (lex.info == \\\"call\\\") lex.pos = (lex.pos || 0) + 1;\\n        return cont(function(type, value) {\\n          if (type == end || value == end) return pass()\\n          return pass(what)\\n        }, proceed);\\n      }\\n      if (type == end || value == end) return cont();\\n      if (sep && sep.indexOf(\\\";\\\") > -1) return pass(what)\\n      return cont(expect(end));\\n    }\\n    return function(type, value) {\\n      if (type == end || value == end) return cont();\\n      return pass(what, proceed);\\n    };\\n  }\\n  function contCommasep(what, end, info) {\\n    for (var i = 3; i < arguments.length; i++)\\n      cx.cc.push(arguments[i]);\\n    return cont(pushlex(end, info), commasep(what, end), poplex);\\n  }\\n  function block(type) {\\n    if (type == \\\"}\\\") return cont();\\n    return pass(statement, block);\\n  }\\n  function maybetype(type, value) {\\n    if (isTS) {\\n      if (type == \\\":\\\") return cont(typeexpr);\\n      if (value == \\\"?\\\") return cont(maybetype);\\n    }\\n  }\\n  function maybetypeOrIn(type, value) {\\n    if (isTS && (type == \\\":\\\" || value == \\\"in\\\")) return cont(typeexpr)\\n  }\\n  function mayberettype(type) {\\n    if (isTS && type == \\\":\\\") {\\n      if (cx.stream.match(/^\\\\s*\\\\w+\\\\s+is\\\\b/, false)) return cont(expression, isKW, typeexpr)\\n      else return cont(typeexpr)\\n    }\\n  }\\n  function isKW(_, value) {\\n    if (value == \\\"is\\\") {\\n      cx.marked = \\\"keyword\\\"\\n      return cont()\\n    }\\n  }\\n  function typeexpr(type, value) {\\n    if (value == \\\"keyof\\\" || value == \\\"typeof\\\" || value == \\\"infer\\\") {\\n      cx.marked = \\\"keyword\\\"\\n      return cont(value == \\\"typeof\\\" ? expressionNoComma : typeexpr)\\n    }\\n    if (type == \\\"variable\\\" || value == \\\"void\\\") {\\n      cx.marked = \\\"type\\\"\\n      return cont(afterType)\\n    }\\n    if (value == \\\"|\\\" || value == \\\"&\\\") return cont(typeexpr)\\n    if (type == \\\"string\\\" || type == \\\"number\\\" || type == \\\"atom\\\") return cont(afterType);\\n    if (type == \\\"[\\\") return cont(pushlex(\\\"]\\\"), commasep(typeexpr, \\\"]\\\", \\\",\\\"), poplex, afterType)\\n    if (type == \\\"{\\\") return cont(pushlex(\\\"}\\\"), commasep(typeprop, \\\"}\\\", \\\",;\\\"), poplex, afterType)\\n    if (type == \\\"(\\\") return cont(commasep(typearg, \\\")\\\"), maybeReturnType, afterType)\\n    if (type == \\\"<\\\") return cont(commasep(typeexpr, \\\">\\\"), typeexpr)\\n  }\\n  function maybeReturnType(type) {\\n    if (type == \\\"=>\\\") return cont(typeexpr)\\n  }\\n  function typeprop(type, value) {\\n    if (type == \\\"variable\\\" || cx.style == \\\"keyword\\\") {\\n      cx.marked = \\\"property\\\"\\n      return cont(typeprop)\\n    } else if (value == \\\"?\\\" || type == \\\"number\\\" || type == \\\"string\\\") {\\n      return cont(typeprop)\\n    } else if (type == \\\":\\\") {\\n      return cont(typeexpr)\\n    } else if (type == \\\"[\\\") {\\n      return cont(expect(\\\"variable\\\"), maybetypeOrIn, expect(\\\"]\\\"), typeprop)\\n    } else if (type == \\\"(\\\") {\\n      return pass(functiondecl, typeprop)\\n    }\\n  }\\n  function typearg(type, value) {\\n    if (type == \\\"variable\\\" && cx.stream.match(/^\\\\s*[?:]/, false) || value == \\\"?\\\") return cont(typearg)\\n    if (type == \\\":\\\") return cont(typeexpr)\\n    if (type == \\\"spread\\\") return cont(typearg)\\n    return pass(typeexpr)\\n  }\\n  function afterType(type, value) {\\n    if (value == \\\"<\\\") return cont(pushlex(\\\">\\\"), commasep(typeexpr, \\\">\\\"), poplex, afterType)\\n    if (value == \\\"|\\\" || type == \\\".\\\" || value == \\\"&\\\") return cont(typeexpr)\\n    if (type == \\\"[\\\") return cont(typeexpr, expect(\\\"]\\\"), afterType)\\n    if (value == \\\"extends\\\" || value == \\\"implements\\\") { cx.marked = \\\"keyword\\\"; return cont(typeexpr) }\\n    if (value == \\\"?\\\") return cont(typeexpr, expect(\\\":\\\"), typeexpr)\\n  }\\n  function maybeTypeArgs(_, value) {\\n    if (value == \\\"<\\\") return cont(pushlex(\\\">\\\"), commasep(typeexpr, \\\">\\\"), poplex, afterType)\\n  }\\n  function typeparam() {\\n    return pass(typeexpr, maybeTypeDefault)\\n  }\\n  function maybeTypeDefault(_, value) {\\n    if (value == \\\"=\\\") return cont(typeexpr)\\n  }\\n  function vardef(_, value) {\\n    if (value == \\\"enum\\\") {cx.marked = \\\"keyword\\\"; return cont(enumdef)}\\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\\n  }\\n  function pattern(type, value) {\\n    if (isTS && isModifier(value)) { cx.marked = \\\"keyword\\\"; return cont(pattern) }\\n    if (type == \\\"variable\\\") { register(value); return cont(); }\\n    if (type == \\\"spread\\\") return cont(pattern);\\n    if (type == \\\"[\\\") return contCommasep(eltpattern, \\\"]\\\");\\n    if (type == \\\"{\\\") return contCommasep(proppattern, \\\"}\\\");\\n  }\\n  function proppattern(type, value) {\\n    if (type == \\\"variable\\\" && !cx.stream.match(/^\\\\s*:/, false)) {\\n      register(value);\\n      return cont(maybeAssign);\\n    }\\n    if (type == \\\"variable\\\") cx.marked = \\\"property\\\";\\n    if (type == \\\"spread\\\") return cont(pattern);\\n    if (type == \\\"}\\\") return pass();\\n    if (type == \\\"[\\\") return cont(expression, expect(']'), expect(':'), proppattern);\\n    return cont(expect(\\\":\\\"), pattern, maybeAssign);\\n  }\\n  function eltpattern() {\\n    return pass(pattern, maybeAssign)\\n  }\\n  function maybeAssign(_type, value) {\\n    if (value == \\\"=\\\") return cont(expressionNoComma);\\n  }\\n  function vardefCont(type) {\\n    if (type == \\\",\\\") return cont(vardef);\\n  }\\n  function maybeelse(type, value) {\\n    if (type == \\\"keyword b\\\" && value == \\\"else\\\") return cont(pushlex(\\\"form\\\", \\\"else\\\"), statement, poplex);\\n  }\\n  function forspec(type, value) {\\n    if (value == \\\"await\\\") return cont(forspec);\\n    if (type == \\\"(\\\") return cont(pushlex(\\\")\\\"), forspec1, poplex);\\n  }\\n  function forspec1(type) {\\n    if (type == \\\"var\\\") return cont(vardef, forspec2);\\n    if (type == \\\"variable\\\") return cont(forspec2);\\n    return pass(forspec2)\\n  }\\n  function forspec2(type, value) {\\n    if (type == \\\")\\\") return cont()\\n    if (type == \\\";\\\") return cont(forspec2)\\n    if (value == \\\"in\\\" || value == \\\"of\\\") { cx.marked = \\\"keyword\\\"; return cont(expression, forspec2) }\\n    return pass(expression, forspec2)\\n  }\\n  function functiondef(type, value) {\\n    if (value == \\\"*\\\") {cx.marked = \\\"keyword\\\"; return cont(functiondef);}\\n    if (type == \\\"variable\\\") {register(value); return cont(functiondef);}\\n    if (type == \\\"(\\\") return cont(pushcontext, pushlex(\\\")\\\"), commasep(funarg, \\\")\\\"), poplex, mayberettype, statement, popcontext);\\n    if (isTS && value == \\\"<\\\") return cont(pushlex(\\\">\\\"), commasep(typeparam, \\\">\\\"), poplex, functiondef)\\n  }\\n  function functiondecl(type, value) {\\n    if (value == \\\"*\\\") {cx.marked = \\\"keyword\\\"; return cont(functiondecl);}\\n    if (type == \\\"variable\\\") {register(value); return cont(functiondecl);}\\n    if (type == \\\"(\\\") return cont(pushcontext, pushlex(\\\")\\\"), commasep(funarg, \\\")\\\"), poplex, mayberettype, popcontext);\\n    if (isTS && value == \\\"<\\\") return cont(pushlex(\\\">\\\"), commasep(typeparam, \\\">\\\"), poplex, functiondecl)\\n  }\\n  function typename(type, value) {\\n    if (type == \\\"keyword\\\" || type == \\\"variable\\\") {\\n      cx.marked = \\\"type\\\"\\n      return cont(typename)\\n    } else if (value == \\\"<\\\") {\\n      return cont(pushlex(\\\">\\\"), commasep(typeparam, \\\">\\\"), poplex)\\n    }\\n  }\\n  function funarg(type, value) {\\n    if (value == \\\"@\\\") cont(expression, funarg)\\n    if (type == \\\"spread\\\") return cont(funarg);\\n    if (isTS && isModifier(value)) { cx.marked = \\\"keyword\\\"; return cont(funarg); }\\n    if (isTS && type == \\\"this\\\") return cont(maybetype, maybeAssign)\\n    return pass(pattern, maybetype, maybeAssign);\\n  }\\n  function classExpression(type, value) {\\n    // Class expressions may have an optional name.\\n    if (type == \\\"variable\\\") return className(type, value);\\n    return classNameAfter(type, value);\\n  }\\n  function className(type, value) {\\n    if (type == \\\"variable\\\") {register(value); return cont(classNameAfter);}\\n  }\\n  function classNameAfter(type, value) {\\n    if (value == \\\"<\\\") return cont(pushlex(\\\">\\\"), commasep(typeparam, \\\">\\\"), poplex, classNameAfter)\\n    if (value == \\\"extends\\\" || value == \\\"implements\\\" || (isTS && type == \\\",\\\")) {\\n      if (value == \\\"implements\\\") cx.marked = \\\"keyword\\\";\\n      return cont(isTS ? typeexpr : expression, classNameAfter);\\n    }\\n    if (type == \\\"{\\\") return cont(pushlex(\\\"}\\\"), classBody, poplex);\\n  }\\n  function classBody(type, value) {\\n    if (type == \\\"async\\\" ||\\n        (type == \\\"variable\\\" &&\\n         (value == \\\"static\\\" || value == \\\"get\\\" || value == \\\"set\\\" || (isTS && isModifier(value))) &&\\n         cx.stream.match(/^\\\\s+[\\\\w$\\\\xa1-\\\\uffff]/, false))) {\\n      cx.marked = \\\"keyword\\\";\\n      return cont(classBody);\\n    }\\n    if (type == \\\"variable\\\" || cx.style == \\\"keyword\\\") {\\n      cx.marked = \\\"property\\\";\\n      return cont(classfield, classBody);\\n    }\\n    if (type == \\\"number\\\" || type == \\\"string\\\") return cont(classfield, classBody);\\n    if (type == \\\"[\\\")\\n      return cont(expression, maybetype, expect(\\\"]\\\"), classfield, classBody)\\n    if (value == \\\"*\\\") {\\n      cx.marked = \\\"keyword\\\";\\n      return cont(classBody);\\n    }\\n    if (isTS && type == \\\"(\\\") return pass(functiondecl, classBody)\\n    if (type == \\\";\\\" || type == \\\",\\\") return cont(classBody);\\n    if (type == \\\"}\\\") return cont();\\n    if (value == \\\"@\\\") return cont(expression, classBody)\\n  }\\n  function classfield(type, value) {\\n    if (value == \\\"?\\\") return cont(classfield)\\n    if (type == \\\":\\\") return cont(typeexpr, maybeAssign)\\n    if (value == \\\"=\\\") return cont(expressionNoComma)\\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \\\"interface\\\"\\n    return pass(isInterface ? functiondecl : functiondef)\\n  }\\n  function afterExport(type, value) {\\n    if (value == \\\"*\\\") { cx.marked = \\\"keyword\\\"; return cont(maybeFrom, expect(\\\";\\\")); }\\n    if (value == \\\"default\\\") { cx.marked = \\\"keyword\\\"; return cont(expression, expect(\\\";\\\")); }\\n    if (type == \\\"{\\\") return cont(commasep(exportField, \\\"}\\\"), maybeFrom, expect(\\\";\\\"));\\n    return pass(statement);\\n  }\\n  function exportField(type, value) {\\n    if (value == \\\"as\\\") { cx.marked = \\\"keyword\\\"; return cont(expect(\\\"variable\\\")); }\\n    if (type == \\\"variable\\\") return pass(expressionNoComma, exportField);\\n  }\\n  function afterImport(type) {\\n    if (type == \\\"string\\\") return cont();\\n    if (type == \\\"(\\\") return pass(expression);\\n    return pass(importSpec, maybeMoreImports, maybeFrom);\\n  }\\n  function importSpec(type, value) {\\n    if (type == \\\"{\\\") return contCommasep(importSpec, \\\"}\\\");\\n    if (type == \\\"variable\\\") register(value);\\n    if (value == \\\"*\\\") cx.marked = \\\"keyword\\\";\\n    return cont(maybeAs);\\n  }\\n  function maybeMoreImports(type) {\\n    if (type == \\\",\\\") return cont(importSpec, maybeMoreImports)\\n  }\\n  function maybeAs(_type, value) {\\n    if (value == \\\"as\\\") { cx.marked = \\\"keyword\\\"; return cont(importSpec); }\\n  }\\n  function maybeFrom(_type, value) {\\n    if (value == \\\"from\\\") { cx.marked = \\\"keyword\\\"; return cont(expression); }\\n  }\\n  function arrayLiteral(type) {\\n    if (type == \\\"]\\\") return cont();\\n    return pass(commasep(expressionNoComma, \\\"]\\\"));\\n  }\\n  function enumdef() {\\n    return pass(pushlex(\\\"form\\\"), pattern, expect(\\\"{\\\"), pushlex(\\\"}\\\"), commasep(enummember, \\\"}\\\"), poplex, poplex)\\n  }\\n  function enummember() {\\n    return pass(pattern, maybeAssign);\\n  }\\n\\n  function isContinuedStatement(state, textAfter) {\\n    return state.lastType == \\\"operator\\\" || state.lastType == \\\",\\\" ||\\n      isOperatorChar.test(textAfter.charAt(0)) ||\\n      /[,.]/.test(textAfter.charAt(0));\\n  }\\n\\n  function expressionAllowed(stream, state, backUp) {\\n    return state.tokenize == tokenBase &&\\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\\\[{}\\\\(,;:]|=>)$/.test(state.lastType) ||\\n      (state.lastType == \\\"quasi\\\" && /\\\\{\\\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\\n  }\\n\\n  // Interface\\n\\n  return {\\n    startState: function(basecolumn) {\\n      var state = {\\n        tokenize: tokenBase,\\n        lastType: \\\"sof\\\",\\n        cc: [],\\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \\\"block\\\", false),\\n        localVars: parserConfig.localVars,\\n        context: parserConfig.localVars && new Context(null, null, false),\\n        indented: basecolumn || 0\\n      };\\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \\\"object\\\")\\n        state.globalVars = parserConfig.globalVars;\\n      return state;\\n    },\\n\\n    token: function(stream, state) {\\n      if (stream.sol()) {\\n        if (!state.lexical.hasOwnProperty(\\\"align\\\"))\\n          state.lexical.align = false;\\n        state.indented = stream.indentation();\\n        findFatArrow(stream, state);\\n      }\\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\\n      var style = state.tokenize(stream, state);\\n      if (type == \\\"comment\\\") return style;\\n      state.lastType = type == \\\"operator\\\" && (content == \\\"++\\\" || content == \\\"--\\\") ? \\\"incdec\\\" : type;\\n      return parseJS(state, style, type, content, stream);\\n    },\\n\\n    indent: function(state, textAfter) {\\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\\n      if (state.tokenize != tokenBase) return 0;\\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\\n      if (!/^\\\\s*else\\\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\\n        var c = state.cc[i];\\n        if (c == poplex) lexical = lexical.prev;\\n        else if (c != maybeelse) break;\\n      }\\n      while ((lexical.type == \\\"stat\\\" || lexical.type == \\\"form\\\") &&\\n             (firstChar == \\\"}\\\" || ((top = state.cc[state.cc.length - 1]) &&\\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\\n                                   !/^[,\\\\.=+\\\\-*:?[\\\\(]/.test(textAfter))))\\n        lexical = lexical.prev;\\n      if (statementIndent && lexical.type == \\\")\\\" && lexical.prev.type == \\\"stat\\\")\\n        lexical = lexical.prev;\\n      var type = lexical.type, closing = firstChar == type;\\n\\n      if (type == \\\"vardef\\\") return lexical.indented + (state.lastType == \\\"operator\\\" || state.lastType == \\\",\\\" ? lexical.info.length + 1 : 0);\\n      else if (type == \\\"form\\\" && firstChar == \\\"{\\\") return lexical.indented;\\n      else if (type == \\\"form\\\") return lexical.indented + indentUnit;\\n      else if (type == \\\"stat\\\")\\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\\n      else if (lexical.info == \\\"switch\\\" && !closing && parserConfig.doubleIndentSwitch != false)\\n        return lexical.indented + (/^(?:case|default)\\\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\\n      else return lexical.indented + (closing ? 0 : indentUnit);\\n    },\\n\\n    electricInput: /^\\\\s*(?:case .*?:|default:|\\\\{|\\\\})$/,\\n    blockCommentStart: jsonMode ? null : \\\"/*\\\",\\n    blockCommentEnd: jsonMode ? null : \\\"*/\\\",\\n    blockCommentContinue: jsonMode ? null : \\\" * \\\",\\n    lineComment: jsonMode ? null : \\\"//\\\",\\n    fold: \\\"brace\\\",\\n    closeBrackets: \\\"()[]{}''\\\\\\\"\\\\\\\"``\\\",\\n\\n    helperType: jsonMode ? \\\"json\\\" : \\\"javascript\\\",\\n    jsonldMode: jsonldMode,\\n    jsonMode: jsonMode,\\n\\n    expressionAllowed: expressionAllowed,\\n\\n    skipExpression: function(state) {\\n      var top = state.cc[state.cc.length - 1]\\n      if (top == expression || top == expressionNoComma) state.cc.pop()\\n    }\\n  };\\n});\\n\\nCodeMirror.registerHelper(\\\"wordChars\\\", \\\"javascript\\\", /[\\\\w$]/);\\n\\nCodeMirror.defineMIME(\\\"text/javascript\\\", \\\"javascript\\\");\\nCodeMirror.defineMIME(\\\"text/ecmascript\\\", \\\"javascript\\\");\\nCodeMirror.defineMIME(\\\"application/javascript\\\", \\\"javascript\\\");\\nCodeMirror.defineMIME(\\\"application/x-javascript\\\", \\\"javascript\\\");\\nCodeMirror.defineMIME(\\\"application/ecmascript\\\", \\\"javascript\\\");\\nCodeMirror.defineMIME(\\\"application/json\\\", {name: \\\"javascript\\\", json: true});\\nCodeMirror.defineMIME(\\\"application/x-json\\\", {name: \\\"javascript\\\", json: true});\\nCodeMirror.defineMIME(\\\"application/ld+json\\\", {name: \\\"javascript\\\", jsonld: true});\\nCodeMirror.defineMIME(\\\"text/typescript\\\", { name: \\\"javascript\\\", typescript: true });\\nCodeMirror.defineMIME(\\\"application/typescript\\\", { name: \\\"javascript\\\", typescript: true });\\n\\n});\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"mod\",\"define\",\"amd\",\"CodeMirror\",\"defineMode\",\"config\",\"parserConfig\",\"ret\",\"tp\",\"style\",\"cont\",\"type\",\"content\",\"tokenBase\",\"stream\",\"state\",\"ch\",\"next\",\"tokenize\",\"tokenString\",\"match\",\"test\",\"eat\",\"tokenComment\",\"skipToEnd\",\"expressionAllowed\",\"inSet\",\"escaped\",\"current\",\"tokenQuasi\",\"peek\",\"eatWhile\",\"wordRE\",\"string\",\"slice\",\"start\",\"isOperatorChar\",\"lexical\",\"word\",\"lastType\",\"keywords\",\"propertyIsEnumerable\",\"kw\",\"quote\",\"jsonldMode\",\"isJsonldKeyword\",\"maybeEnd\",\"findFatArrow\",\"fatArrowAt\",\"arrow\",\"indexOf\",\"isTS\",\"m\",\"exec\",\"index\",\"depth\",\"sawSomething\",\"pos\",\"charAt\",\"bracket\",\"brackets\",\"JSLexical\",\"indented\",\"column\",\"align\",\"prev\",\"info\",\"pass\",\"i\",\"arguments\",\"length\",\"cx\",\"cc\",\"push\",\"apply\",\"inList\",\"name\",\"list\",\"v\",\"register\",\"varname\",\"marked\",\"context\",\"block\",\"newContext\",\"registerVarScoped\",\"localVars\",\"Var\",\"globalVars\",\"inner\",\"Context\",\"vars\",\"isModifier\",\"pushcontext\",\"defaultVars\",\"pushblockcontext\",\"popcontext\",\"pushlex\",\"result\",\"indent\",\"outer\",\"lex\",\"poplex\",\"expect\",\"wanted\",\"exp\",\"statement\",\"value\",\"vardef\",\"parenExpr\",\"maybeexpression\",\"pop\",\"maybeelse\",\"functiondef\",\"forspec\",\"className\",\"enumdef\",\"typename\",\"typeexpr\",\"pattern\",\"expression\",\"maybelabel\",\"maybeCatchBinding\",\"afterExport\",\"afterImport\",\"funarg\",\"expressionInner\",\"expressionNoComma\",\"noComma\",\"body\",\"arrowBodyNoComma\",\"arrowBody\",\"commasep\",\"maybeop\",\"maybeoperatorNoComma\",\"maybeoperatorComma\",\"atomicTypes\",\"hasOwnProperty\",\"classExpression\",\"arrayLiteral\",\"contCommasep\",\"objprop\",\"quasi\",\"maybeTarget\",\"me\",\"expr\",\"property\",\"backUp\",\"continueQuasi\",\"targetNoComma\",\"target\",\"maybeTypeArgs\",\"_\",\"getterSetter\",\"afterprop\",\"maybetype\",\"what\",\"end\",\"sep\",\"proceed\",\"maybetypeOrIn\",\"mayberettype\",\"isKW\",\"afterType\",\"typeprop\",\"typearg\",\"maybeReturnType\",\"functiondecl\",\"typeparam\",\"maybeTypeDefault\",\"maybeAssign\",\"vardefCont\",\"eltpattern\",\"proppattern\",\"_type\",\"forspec1\",\"forspec2\",\"classNameAfter\",\"classBody\",\"classfield\",\"maybeFrom\",\"exportField\",\"importSpec\",\"maybeMoreImports\",\"maybeAs\",\"enummember\",\"indentUnit\",\"statementIndent\",\"jsonld\",\"jsonMode\",\"json\",\"typescript\",\"wordCharacters\",\"A\",\"B\",\"C\",\"D\",\"operator\",\"atom\",\"startState\",\"basecolumn\",\"token\",\"sol\",\"indentation\",\"eatSpace\",\"combinator\",\"textAfter\",\"Pass\",\"firstChar\",\"top\",\"c\",\"closing\",\"doubleIndentSwitch\",\"electricInput\",\"blockCommentStart\",\"blockCommentEnd\",\"blockCommentContinue\",\"lineComment\",\"fold\",\"closeBrackets\",\"helperType\",\"skipExpression\",\"registerHelper\",\"defineMIME\"]\n}\n"]