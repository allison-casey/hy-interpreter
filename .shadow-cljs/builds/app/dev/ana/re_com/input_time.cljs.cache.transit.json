["^ ","~:output",["^ ","~:js","goog.provide('re_com.input_time');\nre_com.input_time.time__GT_mins = (function re_com$input_time$time__GT_mins(time){\nreturn cljs.core.rem(time,(100));\n});\nre_com.input_time.time__GT_hrs = (function re_com$input_time$time__GT_hrs(time){\nreturn cljs.core.quot(time,(100));\n});\n/**\n * Parse the string 's' to a valid int. On parse failure, return 0\n */\nre_com.input_time.to_int = (function re_com$input_time$to_int(s){\nvar val = parseInt(s);\nif(cljs.core.truth_(isNaN(val))){\nreturn (0);\n} else {\nreturn val;\n}\n});\n/**\n * Return a time integer from a triple int vector of form  [H  _  M]\n */\nre_com.input_time.triple__GT_time = (function re_com$input_time$triple__GT_time(p__34401){\nvar vec__34402 = p__34401;\nvar hr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34402,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34402,(1),null);\nvar mi = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34402,(2),null);\nreturn ((hr * (100)) + mi);\n});\nre_com.input_time.triple_seeking_re = /^(\\d{0,2})()()$|^(\\d{0,1})(:{0,1})(\\d{0,2})$|^(\\d{0,2})(:{0,1})(\\d{0,2})$/;\nre_com.input_time.extract_triple_from_text = (function re_com$input_time$extract_triple_from_text(text){\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.not,cljs.core.nil_QMARK_),cljs.core.rest(cljs.core.re_matches(re_com.input_time.triple_seeking_re,text)));\n});\n/**\n * return as a time int, the contents of 'text'\n */\nre_com.input_time.text__GT_time = (function re_com$input_time$text__GT_time(text){\nreturn re_com.input_time.triple__GT_time(cljs.core.map.cljs$core$IFn$_invoke$arity$2(re_com.input_time.to_int,re_com.input_time.extract_triple_from_text(text)));\n});\n/**\n * return a string of format HH:MM for 'time'\n */\nre_com.input_time.time__GT_text = (function re_com$input_time$time__GT_text(time){\nvar hrs = re_com.input_time.time__GT_hrs(time);\nvar mins = re_com.input_time.time__GT_mins(time);\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(re_com.util.pad_zero_number(hrs,(2))),\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(re_com.util.pad_zero_number(mins,(2)))].join('');\n});\n/**\n * Return true if text passes basic time validation.\n * Can't do to much validation because user input might not be finished.\n * Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n * So we only really check against the triple-extracting regular expression\n */\nre_com.input_time.valid_text_QMARK_ = (function re_com$input_time$valid_text_QMARK_(text){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((3),cljs.core.count(re_com.input_time.extract_triple_from_text(text)));\n});\nre_com.input_time.valid_time_QMARK_ = (function re_com$input_time$valid_time_QMARK_(time){\nif((time == null)){\nreturn false;\n} else {\nif(((0) > time)){\nreturn false;\n} else {\nif(((60) < re_com.input_time.time__GT_mins(time))){\nreturn false;\n} else {\nreturn true;\n\n}\n}\n}\n});\nre_com.input_time.validate_arg_times = (function re_com$input_time$validate_arg_times(model,minimum,maximum){\nif(((typeof model === 'number') && (re_com.input_time.valid_time_QMARK_(model)))){\n} else {\nthrow (new Error([\"Assert failed: \",[\"[input-time] given an invalid :model - \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(model)].join(''),\"\\n\",\"(and (number? model) (valid-time? model))\"].join('')));\n}\n\nif(((typeof minimum === 'number') && (re_com.input_time.valid_time_QMARK_(minimum)))){\n} else {\nthrow (new Error([\"Assert failed: \",[\"[input-time] given an invalid :minimum - \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(minimum)].join(''),\"\\n\",\"(and (number? minimum) (valid-time? minimum))\"].join('')));\n}\n\nif(((typeof maximum === 'number') && (re_com.input_time.valid_time_QMARK_(maximum)))){\n} else {\nthrow (new Error([\"Assert failed: \",[\"[input-time] given an invalid :maximum - \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(maximum)].join(''),\"\\n\",\"(and (number? maximum) (valid-time? maximum))\"].join('')));\n}\n\nif((minimum <= maximum)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"[input-time] :minimum \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(minimum),\" > :maximum  \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(maximum)].join(''),\"\\n\",\"(<= minimum maximum)\"].join('')));\n}\n\nreturn true;\n});\n/**\n * Validate the time supplied.\n * Return either the time or, if it is invalid, return something valid\n */\nre_com.input_time.force_valid_time = (function re_com$input_time$force_valid_time(time,min,max,previous){\nif((time == null)){\nreturn previous;\n} else {\nif((!(re_com.input_time.valid_time_QMARK_(time)))){\nreturn previous;\n} else {\nif((time < min)){\nreturn min;\n} else {\nif((max < time)){\nreturn max;\n} else {\nreturn time;\n\n}\n}\n}\n}\n});\n/**\n * Called each time the <input> field gets a keypress, or paste operation.\n * Rests  the text-model only if the new text is valid\n */\nre_com.input_time.on_new_keypress = (function re_com$input_time$on_new_keypress(event,text_model){\nvar current_text = event.target.value;\nif(re_com.input_time.valid_text_QMARK_(current_text)){\nreturn cljs.core.reset_BANG_(text_model,current_text);\n} else {\nreturn null;\n}\n});\n/**\n * When Enter is pressed, force the component to lose focus\n */\nre_com.input_time.lose_focus_if_enter = (function re_com$input_time$lose_focus_if_enter(ev){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ev.keyCode,(13))){\nev.target.blur();\n\nreturn true;\n} else {\nreturn null;\n}\n});\n/**\n * Called when the field looses focus.\n * Re-validate what has been entered, comparing to mins and maxs.\n * Invoke the callback as necessary\n */\nre_com.input_time.on_defocus = (function re_com$input_time$on_defocus(text_model,min,max,callback,previous_val){\nvar time = re_com.input_time.text__GT_time(cljs.core.deref(text_model));\nvar time__$1 = re_com.input_time.force_valid_time(time,min,max,previous_val);\ncljs.core.reset_BANG_(text_model,re_com.input_time.time__GT_text(time__$1));\n\nif(cljs.core.truth_((function (){var and__4115__auto__ = callback;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(time__$1,previous_val);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn (callback.cljs$core$IFn$_invoke$arity$1 ? callback.cljs$core$IFn$_invoke$arity$1(time__$1) : callback.call(null,time__$1));\n} else {\nreturn null;\n}\n});\nre_com.input_time.input_time_args_desc = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"model\",\"model\",331153215),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),true,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer | string | atom\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),re_com.validate.number_or_string_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"a time in integer form. e.g. '09:30am' is 930\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"on-change\",\"on-change\",-732046149),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),true,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer -> nil\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),cljs.core.fn_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"called when user entry completes and value is new. Passed new value as integer\"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"minimum\",\"minimum\",-1621006059),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(0),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer | string\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),re_com.validate.number_or_string_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"user can't enter a time less than this value\"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"maximum\",\"maximum\",573880714),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(2359),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer | string\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),re_com.validate.number_or_string_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"user can't enter a time more than this value\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"disabled?\",\"disabled?\",-1523234181),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"boolean | atom\",new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"when true, user input is disabled\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"show-icon?\",\"show-icon?\",-756836459),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"boolean\",new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"when true, a clock icon will be displayed to the right of input field\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"hide-border?\",\"hide-border?\",1792698922),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"boolean\",new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"when true, input filed is displayed without a border\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"width\",\"width\",-384071477),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),cljs.core.string_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"standard CSS width setting for width of the input box (excluding the icon if present)\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"height\",\"height\",1025178622),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),cljs.core.string_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"standard CSS height setting\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),cljs.core.string_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"CSS class names, space separated (applies to the textbox, not the wrapping div)\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"CSS style map\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),re_com.validate.css_style_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"CSS style. e.g. {:color \\\"red\\\" :width \\\"50px\\\"} (applies to the textbox, not the wrapping div)\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"attr\",\"attr\",-604132353),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"HTML attr map\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),re_com.validate.html_attr_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"span\",\"span\",1394872991),\"HTML attributes, like \",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"code\",\"code\",1586293142),\":on-mouse-move\"], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"br\",\"br\",934104792)], null),\"No \",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"code\",\"code\",1586293142),\":class\"], null),\" or \",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"code\",\"code\",1586293142),\":style\"], null),\"allowed (applies to the textbox, not the wrapping div)\"], null)], null)], null);\n/**\n * I return the markup for an input box which will accept and validate times.\n * Parameters - refer input-time-args above\n */\nre_com.input_time.input_time = (function re_com$input_time$input_time(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___34521 = arguments.length;\nvar i__4737__auto___34523 = (0);\nwhile(true){\nif((i__4737__auto___34523 < len__4736__auto___34521)){\nargs__4742__auto__.push((arguments[i__4737__auto___34523]));\n\nvar G__34525 = (i__4737__auto___34523 + (1));\ni__4737__auto___34523 = G__34525;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn re_com.input_time.input_time.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(re_com.input_time.input_time.cljs$core$IFn$_invoke$arity$variadic = (function (p__34463){\nvar map__34464 = p__34463;\nvar map__34464__$1 = (((((!((map__34464 == null))))?(((((map__34464.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34464.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34464):map__34464);\nvar args = map__34464__$1;\nvar model = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34464__$1,new cljs.core.Keyword(null,\"model\",\"model\",331153215));\nvar minimum = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__34464__$1,new cljs.core.Keyword(null,\"minimum\",\"minimum\",-1621006059),(0));\nvar maximum = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__34464__$1,new cljs.core.Keyword(null,\"maximum\",\"maximum\",573880714),(2359));\nif((((!(goog.DEBUG)))?true:re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic(re_com.validate.extract_arg_data(re_com.input_time.input_time_args_desc),args,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"input-time\"], 0)))){\n} else {\nthrow (new Error(\"Assert failed: (validate-args-macro input-time-args-desc args \\\"input-time\\\")\"));\n}\n\nif(re_com.input_time.validate_arg_times(re_com.util.deref_or_value(model),minimum,maximum)){\n} else {\nthrow (new Error(\"Assert failed: (validate-arg-times (deref-or-value model) minimum maximum)\"));\n}\n\nvar deref_model = re_com.util.deref_or_value(model);\nvar text_model = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(re_com.input_time.time__GT_text(deref_model));\nvar previous_model = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(deref_model);\nreturn (function() { \nvar G__34533__delegate = function (p__34473){\nvar map__34474 = p__34473;\nvar map__34474__$1 = (((((!((map__34474 == null))))?(((((map__34474.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34474.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34474):map__34474);\nvar args__$1 = map__34474__$1;\nvar disabled_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34474__$1,new cljs.core.Keyword(null,\"disabled?\",\"disabled?\",-1523234181));\nvar on_change = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34474__$1,new cljs.core.Keyword(null,\"on-change\",\"on-change\",-732046149));\nvar height = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34474__$1,new cljs.core.Keyword(null,\"height\",\"height\",1025178622));\nvar model__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34474__$1,new cljs.core.Keyword(null,\"model\",\"model\",331153215));\nvar attr = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34474__$1,new cljs.core.Keyword(null,\"attr\",\"attr\",-604132353));\nvar hide_border_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34474__$1,new cljs.core.Keyword(null,\"hide-border?\",\"hide-border?\",1792698922));\nvar maximum__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__34474__$1,new cljs.core.Keyword(null,\"maximum\",\"maximum\",573880714),(2359));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34474__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar style = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34474__$1,new cljs.core.Keyword(null,\"style\",\"style\",-496642736));\nvar class$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34474__$1,new cljs.core.Keyword(null,\"class\",\"class\",-2030961996));\nvar show_icon_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34474__$1,new cljs.core.Keyword(null,\"show-icon?\",\"show-icon?\",-756836459));\nvar minimum__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__34474__$1,new cljs.core.Keyword(null,\"minimum\",\"minimum\",-1621006059),(0));\nif((((!(goog.DEBUG)))?true:re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic(re_com.validate.extract_arg_data(re_com.input_time.input_time_args_desc),args__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"input-time\"], 0)))){\n} else {\nthrow (new Error(\"Assert failed: (validate-args-macro input-time-args-desc args \\\"input-time\\\")\"));\n}\n\nif(re_com.input_time.validate_arg_times(re_com.util.deref_or_value(model__$1),minimum__$1,maximum__$1)){\n} else {\nthrow (new Error(\"Assert failed: (validate-arg-times (deref-or-value model) minimum maximum)\"));\n}\n\nvar style__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(cljs.core.truth_(hide_border_QMARK_)?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"border\",\"border\",1444987323),\"none\"], null):null),style], 0));\nvar new_val = re_com.util.deref_or_value(model__$1);\nvar new_val__$1 = (((new_val < minimum__$1))?minimum__$1:new_val);\nvar new_val__$2 = (((new_val__$1 > maximum__$1))?maximum__$1:new_val__$1);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(previous_model),new_val__$2)){\ncljs.core.reset_BANG_(text_model,re_com.input_time.time__GT_text(new_val__$2));\n\ncljs.core.reset_BANG_(previous_model,new_val__$2);\n} else {\n}\n\nreturn new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_com.box.h_box,new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),\"rc-input-time\",new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"height\",\"height\",1025178622),height], null),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"input\",\"input\",556931961),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"text\",new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),[\"time-entry \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(class$)].join(''),new cljs.core.Keyword(null,\"style\",\"style\",-496642736),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477),width], null),style__$1], 0)),new cljs.core.Keyword(null,\"value\",\"value\",305978217),cljs.core.deref(text_model),new cljs.core.Keyword(null,\"disabled\",\"disabled\",-1529784218),re_com.util.deref_or_value(disabled_QMARK_),new cljs.core.Keyword(null,\"on-change\",\"on-change\",-732046149),(function (event){\nre_com.input_time.on_new_keypress(event,text_model);\n\nreturn null;\n}),new cljs.core.Keyword(null,\"on-blur\",\"on-blur\",814300747),(function (event){\nre_com.input_time.on_defocus(text_model,minimum__$1,maximum__$1,on_change,cljs.core.deref(previous_model));\n\nreturn null;\n}),new cljs.core.Keyword(null,\"on-key-up\",\"on-key-up\",884441808),(function (event){\nre_com.input_time.lose_focus_if_enter(event);\n\nreturn null;\n})], null),attr], 0))], null),(cljs.core.truth_(show_icon_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"div.time-icon\",\"div.time-icon\",638768452),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"i.zmdi.zmdi-hc-fw-rc.zmdi-time\",\"i.zmdi.zmdi-hc-fw-rc.zmdi-time\",-1040605177),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),\"static\",new cljs.core.Keyword(null,\"margin\",\"margin\",-995903681),\"auto\"], null)], null)], null)], null):null)], null)], null);\n};\nvar G__34533 = function (var_args){\nvar p__34473 = null;\nif (arguments.length > 0) {\nvar G__34542__i = 0, G__34542__a = new Array(arguments.length -  0);\nwhile (G__34542__i < G__34542__a.length) {G__34542__a[G__34542__i] = arguments[G__34542__i + 0]; ++G__34542__i;}\n  p__34473 = new cljs.core.IndexedSeq(G__34542__a,0,null);\n} \nreturn G__34533__delegate.call(this,p__34473);};\nG__34533.cljs$lang$maxFixedArity = 0;\nG__34533.cljs$lang$applyTo = (function (arglist__34543){\nvar p__34473 = cljs.core.seq(arglist__34543);\nreturn G__34533__delegate(p__34473);\n});\nG__34533.cljs$core$IFn$_invoke$arity$variadic = G__34533__delegate;\nreturn G__34533;\n})()\n;\n}));\n\n(re_com.input_time.input_time.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_com.input_time.input_time.cljs$lang$applyTo = (function (seq34459){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34459));\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_com/input_time.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",22],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$handler-fn","~$re-com.core","~$validate-args-macro","~$re-com.validate"],"~:excludes",["~#set",[]],"~:name","~$re-com.input-time","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$reagent.core","^Q","~$reagent","^Q","^H","^H","~$re-com.text","^S","~$re-com.box","^T","~$re-com.util","^U","~$cljs.core","^V","~$goog","^W"],"~:seen",["^J",["~:require","~:require-macros"]],"~:uses",["^ ","~$css-style?","^H","~$html-attr?","^H","~$number-or-string?","^H","~$label","^S","~$h-box","^T","~$gap","^T","~$pad-zero-number","^U","~$deref-or-value","^U"],"^Z",["^ ","^F","^F","^H","^H","^V","^V","^Q","^Q","^R","^Q"],"~:form",["~#list",["~$ns","^L",["^19",["^Z",["^F","~:refer",["^E"]]]],["^19",["^Y",["^Q","~:as","^R"],["^H","^1;",["^10","^11","^12"],"~:refer-macros",["^G"]],["^S","^1;",["^13"]],["^T","^1;",["^14","^15"]],["^U","^1;",["^16","^17"]]]]]],"~:flags",["^ ","^Z",["^J",[]],"^Y",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^W","^V","^Q","^H","^S","^T","^U"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","re_com/input_time.cljs"],"~:compiled-at",1605403371784,"~:resource-name","re_com/input_time.cljs","~:warnings",[],"~:source","(ns re-com.input-time\n  (:require-macros [re-com.core :refer [handler-fn]])\n  (:require [reagent.core    :as    reagent]\n            [re-com.validate :refer [css-style? html-attr? number-or-string?] :refer-macros [validate-args-macro]]\n            [re-com.text     :refer [label]]\n            [re-com.box      :refer [h-box gap]]\n            [re-com.util     :refer [pad-zero-number deref-or-value]]))\n\n\n(defn- time->mins\n  [time]\n  (rem time 100))\n\n\n(defn- time->hrs\n  [time]\n  (quot time 100))\n\n(defn- to-int\n  \"Parse the string 's' to a valid int. On parse failure, return 0\"\n  [s]\n  (let [val (js/parseInt s)]\n    (if (js/isNaN val) 0 val)))\n\n(defn- triple->time\n  \"Return a time integer from a triple int vector of form  [H  _  M]\"\n  [[hr _ mi]]\n  (+ (* hr 100) mi))                                        ;; a four digit integer:  HHMM\n\n\n;; This regular expression matchs all valid forms of time entry, including partial\n;; forms which happen during user entry.\n;; It is composed of 3 'or' options, separated by '|',  and within each, is a sub-re which\n;; attempts to match the HH ':' MM parts.\n;; So any attempt to match against this re, using \"re-matches\" will return\n;; a vector of 10 items:\n;;   - the 1st item will be the entire string matched\n;;   - followed by 3 groups of 3.\n(def ^{:private true}\n  triple-seeking-re #\"^(\\d{0,2})()()$|^(\\d{0,1})(:{0,1})(\\d{0,2})$|^(\\d{0,2})(:{0,1})(\\d{0,2})$\")\n\n(defn- extract-triple-from-text\n  [text]\n  (->> text\n       (re-matches triple-seeking-re)                       ;; looks for different ways of matching triples   H : M\n       (rest)                                               ;; get rid of the first value. It is the entire matched string.\n       (filter (comp not nil?))))                           ;; of the 9 items, there should be only 3 non-nil matches coresponding to  H : M\n\n\n(defn text->time\n  \"return as a time int, the contents of 'text'\"\n  [text]\n  (->> text\n       extract-triple-from-text\n       (map to-int)                                         ;; make them ints (or 0)\n       triple->time))                                       ;; turn the triple of values into a single int\n\n\n(defn time->text\n  \"return a string of format HH:MM for 'time'\"\n  [time]\n  (let [hrs  (time->hrs  time)\n        mins (time->mins time)]\n    (str (pad-zero-number hrs 2) \":\" (pad-zero-number mins 2))))\n\n(defn valid-text?\n  \"Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression\"\n  [text]\n  (= 3 (count (extract-triple-from-text text))))\n\n(defn valid-time?\n  [time]\n  (cond\n    (nil? time) false                                       ;; can't be nil\n    (> 0 time) false                                        ;; must be a poistive number\n    (< 60 (time->mins time)) false                          ;; too many mins\n    :else true))\n\n(defn- validate-arg-times\n  [model minimum maximum]\n  (assert (and (number? model) (valid-time? model)) (str \"[input-time] given an invalid :model - \" model))\n  (assert (and (number? minimum) (valid-time? minimum)) (str \"[input-time] given an invalid :minimum - \" minimum))\n  (assert (and (number? maximum) (valid-time? maximum)) (str \"[input-time] given an invalid :maximum - \" maximum))\n  (assert (<= minimum maximum) (str \"[input-time] :minimum \" minimum \" > :maximum  \" maximum))\n  true)\n\n(defn- force-valid-time\n  \"Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid\"\n  [time min max previous]\n  (cond\n    (nil? time) previous\n    (not (valid-time? time)) previous\n    (< time min) min\n    (< max time) max\n    :else time))\n\n(defn- on-new-keypress\n  \"Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid\"\n  [event text-model]\n  (let [current-text (-> event .-target .-value)]           ;; gets the current input field text\n    (when (valid-text? current-text)\n      (reset! text-model current-text))))\n\n(defn- lose-focus-if-enter\n  \"When Enter is pressed, force the component to lose focus\"\n  [ev]\n  (when (= (.-keyCode ev) 13)\n    (-> ev .-target .blur)\n    true))\n\n(defn- on-defocus\n  \"Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary\"\n  [text-model min max callback previous-val]\n  (let [time (text->time @text-model)\n        time (force-valid-time time min max previous-val)]\n    (reset! text-model (time->text time))\n    (when (and callback (not= time previous-val))\n      (callback time))))\n\n(def input-time-args-desc\n  [{:name :model        :required true                   :type \"integer | string | atom\" :validate-fn number-or-string? :description \"a time in integer form. e.g. '09:30am' is 930\"}\n   {:name :on-change    :required true                   :type \"integer -> nil\"          :validate-fn fn?               :description \"called when user entry completes and value is new. Passed new value as integer\"}\n   {:name :minimum      :required false :default 0       :type \"integer | string\"        :validate-fn number-or-string? :description \"user can't enter a time less than this value\"}\n   {:name :maximum      :required false :default 2359    :type \"integer | string\"        :validate-fn number-or-string? :description \"user can't enter a time more than this value\"}\n   {:name :disabled?    :required false :default false   :type \"boolean | atom\"                                         :description \"when true, user input is disabled\"}\n   {:name :show-icon?   :required false :default false   :type \"boolean\"                                                :description \"when true, a clock icon will be displayed to the right of input field\"}\n   {:name :hide-border? :required false :default false   :type \"boolean\"                                                :description \"when true, input filed is displayed without a border\"}\n   {:name :width        :required false                  :type \"string\"                  :validate-fn string?           :description \"standard CSS width setting for width of the input box (excluding the icon if present)\"}\n   {:name :height       :required false                  :type \"string\"                  :validate-fn string?           :description \"standard CSS height setting\"}\n   {:name :class        :required false                  :type \"string\"                  :validate-fn string?           :description \"CSS class names, space separated (applies to the textbox, not the wrapping div)\"}\n   {:name :style        :required false                  :type \"CSS style map\"           :validate-fn css-style?        :description \"CSS style. e.g. {:color \\\"red\\\" :width \\\"50px\\\"} (applies to the textbox, not the wrapping div)\" }\n   {:name :attr         :required false                  :type \"HTML attr map\"           :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the textbox, not the wrapping div)\"]}])\n\n(defn input-time\n  \"I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above\"\n  [& {:keys [model minimum maximum] :as args\n      :or   {minimum 0 maximum 2359}}]\n  {:pre [(validate-args-macro input-time-args-desc args \"input-time\")\n         (validate-arg-times (deref-or-value model) minimum maximum)]}\n  (let [deref-model    (deref-or-value model)\n        text-model     (reagent/atom (time->text deref-model))\n        previous-model (reagent/atom deref-model)]\n    (fn\n      [& {:keys [model on-change minimum maximum disabled? show-icon? hide-border? width height class style attr] :as args\n          :or   {minimum 0 maximum 2359}}]\n      {:pre [(validate-args-macro input-time-args-desc args \"input-time\")\n             (validate-arg-times (deref-or-value model) minimum maximum)]}\n      (let [style (merge (when hide-border? {:border \"none\"})\n                         style)\n            new-val (deref-or-value model)\n            new-val (if (< new-val minimum) minimum new-val)\n            new-val (if (> new-val maximum) maximum new-val)]\n        ;; if the model is different to that currently shown in text, then reset the text to match\n        ;; other than that we want to keep the current text, because the user is probably typing\n        (when (not= @previous-model new-val)\n          (reset! text-model (time->text new-val))\n          (reset! previous-model new-val))\n\n        [h-box\n         :class    \"rc-input-time\"\n         :style    {:height height}\n         :children [[:input\n                     (merge\n                       {:type      \"text\"\n                        :class     (str \"time-entry \" class)\n                        :style     (merge {:width width}\n                                          style)\n                        :value     @text-model\n                        :disabled  (deref-or-value disabled?)\n                        :on-change (handler-fn (on-new-keypress event text-model))\n                        :on-blur   (handler-fn (on-defocus text-model minimum maximum on-change @previous-model))\n                        :on-key-up (handler-fn (lose-focus-if-enter event))}\n                       attr)]\n                    (when show-icon?\n                      [:div.time-icon\n                       [:i.zmdi.zmdi-hc-fw-rc.zmdi-time\n                        {:style {:position \"static\" :margin \"auto\"}}]])]]))))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["re-com.input-time/time->mins","time","cljs.core/rem","re-com.input-time/time->hrs","cljs.core/quot","re-com.input-time/to-int","s","val","js/parseInt","js/isNaN","p__34401","vec__34402","cljs.core.nth","re-com.input-time/triple->time","hr","_","mi","re-com.input-time/triple-seeking-re","re-com.input-time/extract-triple-from-text","text","cljs.core/re-matches","cljs.core/rest","cljs.core.filter","cljs.core.comp","cljs.core/not","cljs.core/nil?","re-com.input-time/text->time","cljs.core.map","re-com.input-time/time->text","hrs","mins","re-com.util/pad-zero-number","re-com.input-time/valid-text?","cljs.core._EQ_","cljs.core/count","re-com.input-time/valid-time?","re-com.input-time/validate-arg-times","model","minimum","maximum","js/Error","re-com.input-time/force-valid-time","min","max","previous","re-com.input-time/on-new-keypress","event","text-model","current-text","cljs.core/reset!","re-com.input-time/lose-focus-if-enter","ev","re-com.input-time/on-defocus","callback","previous-val","cljs.core/deref","and__4115__auto__","cljs.core.not_EQ_","re-com.input-time/input-time-args-desc","re-com.validate/number-or-string?","cljs.core/fn?","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-com.input-time/input-time","p__34463","map__34464","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq34459","self__4724__auto__","cljs.core/seq","args","js/goog.DEBUG","re_com.validate.validate_args","re-com.validate/extract-arg-data","re-com.util/deref-or-value","deref-model","reagent.core.atom","previous-model","p__34473","map__34474","on-change","disabled?","show-icon?","hide-border?","width","height","class","style","attr","cljs.core.merge","new-val","re-com.box/h-box"]],"~:used-vars",["^J",["~$re-com.input-time/on-new-keypress","~$cljs.core/comp","~$cljs.core/rest","~$re-com.input-time/validate-arg-times","~$re-com.input-time/extract-triple-from-text","~$re-com.validate/html-attr?","~$re-com.util/pad-zero-number","~$cljs.core/filter","~$cljs.core/=","~$re-com.input-time/lose-focus-if-enter","~$cljs.core/re-matches","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/seq","~$re-com.input-time/to-int","~$re-com.validate/css-style?","~$cljs.core/not=","~$cljs.core/string?","~$cljs.core/quot","~$re-com.validate/extract-arg-data","~$re-com.input-time/force-valid-time","~$re-com.input-time/time->text","~$re-com.input-time/input-time","~$re-com.input-time/valid-text?","~$re-com.input-time/triple-seeking-re","~$re-com.input-time/on-defocus","~$cljs.core/reset!","~$cljs.core/map","~$re-com.util/deref-or-value","~$cljs.core/fn?","~$js/isNaN","~$re-com.input-time/triple->time","~$cljs.core/nil?","~$js/goog.DEBUG","~$re-com.validate/number-or-string?","~$cljs.core/not","~$re-com.validate/validate-args","~$cljs.core/rem","~$re-com.input-time/text->time","~$re-com.input-time/time->mins","~$re-com.input-time/time->hrs","~$re-com.input-time/valid-time?","~$re-com.input-time/input-time-args-desc","~$cljs.core/merge","~$re-com.box/h-box","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^1B","reagent/impl/batching.cljs"],["71172e9be671755156730f86af647b7c667093fa","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^W","^V","~$reagent.debug","~$reagent.impl.util"]]],["^1B","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","~$goog.dom.HtmlElement"]]],["^1B","goog/i18n/datetimesymbols.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","re_com/text.cljs"],["dde82697ed24ac704e2039c3739f5532ee8f1948","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","^T","^U","^H"]]],["^1B","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","~$goog.array","~$goog.asserts"]]],["^1B","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","~$goog.string"]]],["^1B","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Y","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1B","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Z","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^32"]]],["^1B","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Z"]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],["d747ad68d8b63e918b83411f6780402d53ff7e91","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","3180f5f58c360a2e36c5ff354213b3ff22f43d1b","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1B","reagent/impl/util.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","~$clojure.string","~$clojure.walk","^31","^2V"]]],["^1B","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","re_com/util.cljs"],["dde82697ed24ac704e2039c3739f5532ee8f1948","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","~$clojure.set","~$reagent.ratom","~$goog.date.DateTime","~$goog.date.UtcDateTime"]]],["^1B","goog/date/utcdatetime.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","~$goog.date","~$goog.date.Date","^3@","~$goog.date.Interval"]]],["^1B","reagent/ratom.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","^2W","^2V","~$reagent.impl.batching","^3>","^31"]]],["^1B","goog/date/datelike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^39","node_modules/react/index.js"],["d747ad68d8b63e918b83411f6780402d53ff7e91","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^3:","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1B","shadow/js.js"],["a8b89050e877436ecc7f58bd6d199cd8d399a9b5","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","reagent/impl/template.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","^A","^3<","^2W","~$reagent.impl.component","^3E","~$reagent.impl.input","~$reagent.impl.protocols","^3?","^2V","^31"]]],["^1B","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Z"]]],"~:SHADOW-TIMESTAMP",[1605284826000,1605284826000,1593457559000],["^39","node_modules/react/cjs/react.development.js"],["d747ad68d8b63e918b83411f6780402d53ff7e91","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","0c9d0acaa1ab1e24333c71607d0fa0609193e7d7","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^3:","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"]]],["^1B","re_com/validate.cljs"],["dde82697ed24ac704e2039c3739f5532ee8f1948","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","~$cljs-time.core","^3>","^U","^Q","^3H","~$reagent.impl.template","^2["]]],["^1B","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Z","~$goog.reflect"]]],["^1B","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Z","~$goog.html.trustedtypes","^35","^36","^37","^38"]]],["^1B","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Y","^2Z","~$goog.html.SafeUrl","^37","^38","^32"]]],["^1B","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Z","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^3R","^34","~$goog.html.uncheckedconversions","^37","^32"]]],["^1B","reagent/impl/component.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","^31","^A","^2W","^3E","^3J","^3?","^2V"]]],["^1B","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V"]]],["^1B","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1B","goog/date/date.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Z","~$goog.date.DateLike","~$goog.i18n.DateTimeSymbols","^2["]]],["^1B","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Y","^2Z","~$goog.dom.TagName","~$goog.dom.tags","^3V","^3W","~$goog.html.SafeStyleSheet","^3R","^34","^3Q","^35","^36","~$goog.labs.userAgent.browser","^31","^37","^38","^32"]]],["^1B","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^31"]]],["^1B","re_com/box.cljs"],["dde82697ed24ac704e2039c3739f5532ee8f1948","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","^3<","^H"]]],["^1B","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1B","reagent/impl/protocols.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V"]]],["^1B","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Y","^2Z","^2[","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1B","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^39","node_modules/object-assign/index.js"],["d747ad68d8b63e918b83411f6780402d53ff7e91","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","519ffd5a4c91b67302cc9947b794966d629860cd","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^3:"]]],["^1B","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",[]]],["^1B","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Y","^31"]]],["^1B","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","^2[","~$goog.string.StringBuffer"]]],["^39","node_modules/react/cjs/react.production.min.js"],["d747ad68d8b63e918b83411f6780402d53ff7e91","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","a25ef7d1b1992294ca65e96d70e1be7f70977b13","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^3:","^3L"]]],["^1B","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","~$goog.dom.safe","^3X","^37","^32"]]],["^1B","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^32"]]],["^1B","reagent/core.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","^A","^3O","^3H","^2W","^3E","^3J","^3?","^2V"]]],["^1B","re_com/input_time.cljs"],["dde82697ed24ac704e2039c3739f5532ee8f1948","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","^Q","^H","^S","^T","^U"]]],["^1B","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Y","^2Z","^3T","~$goog.math"]]],["^1B","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Z","^3U","^3V","^3W","^43","^3R","^34","^37","^32"]]],["^39","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["d747ad68d8b63e918b83411f6780402d53ff7e91","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^3:"]]],["^1B","reagent/impl/input.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","^3H","^3E","^3J"]]],["^1B","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W"]]],["^1B","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","~$goog.math.Long","~$goog.math.Integer","^2[","^31","^2Y","~$goog.Uri","^4<"]]],["^1B","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Z","^3Q","^37","^38"]]],["^1B","reagent/debug.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V"]]],["^1B","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Y","^2Z","^3W","^31","^37","^38","^32"]]],["^1B","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^3P"]]],["^1B","clojure/set.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V"]]],["^1B","cljs_time/core.cljs"],["7d4274be169f54a03d4afcc40ea95f40d44ca0a2","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","~$cljs-time.internal.core","^3<","^3D","^3B","^3C","^3@","^3A"]]],["^1B","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Y","^2Z","^2["]]],["^1B","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^2Z","^38"]]],["^1B","cljs_time/internal/core.cljs"],["7d4274be169f54a03d4afcc40ea95f40d44ca0a2","^2R",["^ ","^2S",null,"^2T",["^J",[]],"^2U",["^W","^V","^3<","^2[","~$goog.string.format","^3B"]]]]],"~:clj-info",["^ ","jar:file:/home/allie/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1587246661000,"jar:file:/home/allie/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1598162373000,"jar:file:/home/allie/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1593457559000,"jar:file:/home/allie/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1589079575000,"jar:file:/home/allie/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1593457559000,"jar:file:/home/allie/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1593457559000,"jar:file:/home/allie/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1598162373000,"jar:file:/home/allie/.m2/repository/reagent/reagent/1.0.0-alpha2/reagent-1.0.0-alpha2.jar!/reagent/interop.clj",1596911442000,"jar:file:/home/allie/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1593457559000,"jar:file:/home/allie/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1587246661000,"jar:file:/home/allie/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1593457559000,"jar:file:/home/allie/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1587246661000,"jar:file:/home/allie/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1593457559000,"jar:file:/home/allie/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1593457559000,"jar:file:/home/allie/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1593457559000,"jar:file:/home/allie/.m2/repository/reagent/reagent/1.0.0-alpha2/reagent-1.0.0-alpha2.jar!/reagent/core.clj",1596911442000,"jar:file:/home/allie/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1598162373000,"jar:file:/home/allie/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1598162373000,"jar:file:/home/allie/.m2/repository/re-com/re-com/2.9.0/re-com-2.9.0.jar!/re_com/validate.clj",1605403185000,"jar:file:/home/allie/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1593457559000,"jar:file:/home/allie/.m2/repository/reagent/reagent/1.0.0-alpha2/reagent-1.0.0-alpha2.jar!/reagent/ratom.clj",1596911442000,"jar:file:/home/allie/.m2/repository/re-com/re-com/2.9.0/re-com-2.9.0.jar!/re_com/core.clj",1605403185000,"jar:file:/home/allie/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1587246661000,"jar:file:/home/allie/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1593457559000,"jar:file:/home/allie/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1598162373000,"jar:file:/home/allie/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1587246661000,"jar:file:/home/allie/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1593457559000,"jar:file:/home/allie/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1587246661000,"jar:file:/home/allie/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1587246661000,"jar:file:/home/allie/.m2/repository/reagent/reagent/1.0.0-alpha2/reagent-1.0.0-alpha2.jar!/reagent/debug.clj",1596911442000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_com/input_time.cljs","^7",1,"^8",5,"^9",1,"^:",22],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",["^ ","^E","^F","^G","^H"],"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^Q","^H","^H","^S","^S","^T","^T","^U","^U","^V","^V","^W","^W"],"^X",["^J",["^Y","^Z"]],"~:shadow/js-access-global",["^J",["isNaN","Error","parseInt"]],"^[",["^ ","^10","^H","^11","^H","^12","^H","^13","^S","^14","^T","^15","^T","^16","^U","^17","^U"],"~:defs",["^ ","~$text->time",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",50,"^8",7,"^9",50,"^:",17,"~:arglists",["^19",["~$quote",["^19",[["~$text"]]]]],"~:doc","return as a time int, the contents of 'text'"],"^K","^2H","^6","re_com/input_time.cljs","^:",17,"~:method-params",["^19",[["^5>"]]],"~:protocol-impl",null,"~:arglists-meta",["^19",[null,null]],"^8",1,"~:variadic?",false,"^7",50,"~:ret-tag","~$number","^9",50,"~:max-fixed-arity",1,"~:fn-var",true,"^5<",["^19",["^5=",["^19",[["^5>"]]]]],"^5?","return as a time int, the contents of 'text'"],"~$on-defocus",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",116,"^8",8,"^9",116,"^:",18,"~:private",true,"^5<",["^19",["^5=",["^19",[["~$text-model","~$min","~$max","~$callback","~$previous-val"]]]]],"^5?","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"^5I",true,"^K","^2;","^6","re_com/input_time.cljs","^:",18,"^5@",["^19",[["^5J","^5K","^5L","^5M","^5N"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",116,"^5D",["^J",["~$any","~$clj-nil"]],"^9",116,"^5F",5,"^5G",true,"^5<",["^19",["^5=",["^19",[["^5J","^5K","^5L","^5M","^5N"]]]]],"^5?","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"~$valid-time?",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",74,"^8",7,"^9",74,"^:",18,"^5<",["^19",["^5=",["^19",[["~$time"]]]]]],"^K","^2K","^6","re_com/input_time.cljs","^:",18,"^5@",["^19",[["^5R"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",74,"^5D","~$boolean","^9",74,"^5F",1,"^5G",true,"^5<",["^19",["^5=",["^19",[["^5R"]]]]]],"~$input-time-args-desc",["^ ","^K","^2L","^6","re_com/input_time.cljs","^7",127,"^8",1,"^9",127,"^:",26,"^5",["^ ","^6","re_com/input_time.cljs","^7",127,"^8",6,"^9",127,"^:",26],"~:tag","~$cljs.core/IVector"],"~$time->hrs",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",15,"^8",8,"^9",15,"^:",17,"^5I",true,"^5<",["^19",["^5=",["^19",[["^5R"]]]]]],"^5I",true,"^K","^2J","^6","re_com/input_time.cljs","^:",17,"^5@",["^19",[["^5R"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",15,"^5D","^5E","^9",15,"^5F",1,"^5G",true,"^5<",["^19",["^5=",["^19",[["^5R"]]]]]],"~$time->mins",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",10,"^8",8,"^9",10,"^:",18,"^5I",true,"^5<",["^19",["^5=",["^19",[["^5R"]]]]]],"^5I",true,"^K","^2I","^6","re_com/input_time.cljs","^:",18,"^5@",["^19",[["^5R"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",10,"^5D","^5E","^9",10,"^5F",1,"^5G",true,"^5<",["^19",["^5=",["^19",[["^5R"]]]]]],"~$triple->time",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",25,"^8",8,"^9",25,"^:",20,"^5I",true,"^5<",["^19",["^5=",["^19",[[["~$hr","~$_","~$mi"]]]]]],"^5?","Return a time integer from a triple int vector of form  [H  _  M]"],"^5I",true,"^K","^2A","^6","re_com/input_time.cljs","^:",20,"^5@",["^19",[["~$p__34401"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",25,"^5D","^5E","^9",25,"^5F",1,"^5G",true,"^5<",["^19",["^5=",["^19",[[["^5Z","~$_","^5["]]]]]],"^5?","Return a time integer from a triple int vector of form  [H  _  M]"],"~$valid-text?",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",66,"^8",7,"^9",66,"^:",18,"^5<",["^19",["^5=",["^19",[["^5>"]]]]],"^5?","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"^K","^29","^6","re_com/input_time.cljs","^:",18,"^5@",["^19",[["^5>"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",66,"^5D","^5S","^9",66,"^5F",1,"^5G",true,"^5<",["^19",["^5=",["^19",[["^5>"]]]]],"^5?","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"~$time->text",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",59,"^8",7,"^9",59,"^:",17,"^5<",["^19",["^5=",["^19",[["^5R"]]]]],"^5?","return a string of format HH:MM for 'time'"],"^K","^27","^6","re_com/input_time.cljs","^:",17,"^5@",["^19",[["^5R"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",59,"^5D","~$string","^9",59,"^5F",1,"^5G",true,"^5<",["^19",["^5=",["^19",[["^5R"]]]]],"^5?","return a string of format HH:MM for 'time'"],"~$triple-seeking-re",["^ ","^5",["^ ","^6","re_com/input_time.cljs","^7",40,"^8",3,"^9",40,"^:",20,"^5I",true],"^5I",true,"^K","^2:","^6","re_com/input_time.cljs","^:",20,"^8",1,"^7",39,"^9",40,"^5U","^5O"],"~$on-new-keypress",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",101,"^8",8,"^9",101,"^:",23,"^5I",true,"^5<",["^19",["^5=",["^19",[["~$event","^5J"]]]]],"^5?","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"^5I",true,"^K","^1N","^6","re_com/input_time.cljs","^:",23,"^5@",["^19",[["^66","^5J"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",101,"^5D",["^J",[null,"^5O","^5P"]],"^9",101,"^5F",2,"^5G",true,"^5<",["^19",["^5=",["^19",[["^66","^5J"]]]]],"^5?","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"~$to-int",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",19,"^8",8,"^9",19,"^:",14,"^5I",true,"^5<",["^19",["^5=",["^19",[["~$s"]]]]],"^5?","Parse the string 's' to a valid int. On parse failure, return 0"],"^5I",true,"^K","^20","^6","re_com/input_time.cljs","^:",14,"^5@",["^19",[["~$s"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",19,"^5D",["^J",["~$js","^5E"]],"^9",19,"^5F",1,"^5G",true,"^5<",["^19",["^5=",["^19",[["~$s"]]]]],"^5?","Parse the string 's' to a valid int. On parse failure, return 0"],"~$extract-triple-from-text",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",42,"^8",8,"^9",42,"^:",32,"^5I",true,"^5<",["^19",["^5=",["^19",[["^5>"]]]]]],"^5I",true,"^K","^1R","^6","re_com/input_time.cljs","^:",32,"^5@",["^19",[["^5>"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",42,"^5D","~$cljs.core/LazySeq","^9",42,"^5F",1,"^5G",true,"^5<",["^19",["^5=",["^19",[["^5>"]]]]]],"~$validate-arg-times",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",82,"^8",8,"^9",82,"^:",26,"^5I",true,"^5<",["^19",["^5=",["^19",[["~$model","~$minimum","~$maximum"]]]]]],"^5I",true,"^K","^1Q","^6","re_com/input_time.cljs","^:",26,"^5@",["^19",[["^6<","^6=","^6>"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",82,"^5D","^5S","^9",82,"^5F",3,"^5G",true,"^5<",["^19",["^5=",["^19",[["^6<","^6=","^6>"]]]]]],"~$force-valid-time",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",90,"^8",8,"^9",90,"^:",24,"^5I",true,"^5<",["^19",["^5=",["^19",[["^5R","^5K","^5L","~$previous"]]]]],"^5?","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"^5I",true,"^K","^26","^6","re_com/input_time.cljs","^:",24,"^5@",["^19",[["^5R","^5K","^5L","^6@"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",90,"^9",90,"^5F",4,"^5G",true,"^5<",["^19",["^5=",["^19",[["^5R","^5K","^5L","^6@"]]]]],"^5?","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"~$input-time",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",141,"^8",7,"^9",141,"^:",17,"^5<",["^19",["^5=",["^19",[["~$&",["^ ","~:keys",["^6<","^6=","^6>"],"^1<","~$args","~:or",["^ ","^6=",0,"^6>",2359]]]]]]],"^5?","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above","~:top-fn",["^ ","^5C",true,"~:fixed-arity",0,"^5F",0,"^5@",[["^19",[["^ ","^6B",["^6<","^6=","^6>"],"^1<","^6C","^6D",["^ ","^6=",0,"^6>",2359]]]]],"^5<",["^19",[["~$&",["^ ","^6B",["^6<","^6=","^6>"],"^1<","^6C","^6D",["^ ","^6=",0,"^6>",2359]]]]],"^5B",["^19",[null]]]],"^K","^28","^6","re_com/input_time.cljs","^:",17,"^6E",["^ ","^5C",true,"^6F",0,"^5F",0,"^5@",[["^19",[["^ ","^6B",["^6<","^6=","^6>"],"^1<","^6C","^6D",["^ ","^6=",0,"^6>",2359]]]]],"^5<",["^19",[["~$&",["^ ","^6B",["^6<","^6=","^6>"],"^1<","^6C","^6D",["^ ","^6=",0,"^6>",2359]]]]],"^5B",["^19",[null]]],"^5@",[["^19",[["^ ","^6B",["^6<","^6=","^6>"],"^1<","^6C","^6D",["^ ","^6=",0,"^6>",2359]]]]],"^5A",null,"^6F",0,"^5B",["^19",[null]],"^8",1,"^5C",true,"~:methods",[["^ ","^6F",0,"^5C",true,"^5U","~$function"]],"^7",141,"^5D","^5O","^9",141,"^5F",0,"^5G",true,"^5<",["^19",[["~$&",["^ ","^6B",["^6<","^6=","^6>"],"^1<","^6C","^6D",["^ ","^6=",0,"^6>",2359]]]]],"^5?","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above"],"~$lose-focus-if-enter",["^ ","^5;",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",109,"^8",8,"^9",109,"^:",27,"^5I",true,"^5<",["^19",["^5=",["^19",[["~$ev"]]]]],"^5?","When Enter is pressed, force the component to lose focus"],"^5I",true,"^K","^1W","^6","re_com/input_time.cljs","^:",27,"^5@",["^19",[["^6J"]]],"^5A",null,"^5B",["^19",[null,null]],"^8",1,"^5C",false,"^7",109,"^5D",["^J",["^5S","^5P"]],"^9",109,"^5F",1,"^5G",true,"^5<",["^19",["^5=",["^19",[["^6J"]]]]],"^5?","When Enter is pressed, force the component to lose focus"]],"^Z",["^ ","^F","^F","^H","^H","^V","^V","^Q","^Q","^R","^Q"],"~:cljs.analyzer/constants",["^ ","^X",["^J",["~:description","~:children","~:div.time-icon","~:disabled","~:else","~:i.zmdi.zmdi-hc-fw-rc.zmdi-time","~:default","^K","~:value","~:maximum","~:hide-border?","~:width","~:on-blur","~:type","~:style","~:on-key-up","~:class","~:minimum","~:show-icon?","~:code","~:position","~:validate-fn","~:br","~:input","~:on-change","~:border","~:disabled?","~:required","~:height","~:span","~:margin","~:model","~:attr"]],"~:order",["^6P","^K","^7:","^6X","^74","^6L","^7>","^77","^6R","^70","^6T","^79","^71","^6U","^6V","^7;","^6[","^6Y","^7?","^7<","^72","^75","^78","^6M","^76","^6S","^6O","^6W","^6Z","^6N","^6Q","^73","^7="]],"^1>",["^ ","^Z",["^J",[]],"^Y",["^J",[]]],"^1?",["^ "],"^1@",["^W","^V","^Q","^H","^S","^T","^U"]],"^N","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^2Q",[["^7C","~:static-fns"],true,["^7C","~:shadow-tweaks"],null,["^7C","~:source-map-inline"],null,["^7C","~:elide-asserts"],false,["^7C","~:optimize-constants"],null,["^7C","^1E"],null,["^7C","~:external-config"],null,["^7C","~:tooling-config"],null,["^7C","~:emit-constants"],null,["^7C","~:load-tests"],null,["^7C","~:form-size-threshold"],null,["^7C","~:data-readers"],null,["^7C","~:infer-externs"],"~:auto",["^7C","^1G"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7C","~:fn-invoke-direct"],null,["^7C","~:source-map"],"/dev/null"]]]